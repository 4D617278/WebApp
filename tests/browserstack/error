
Execution of 4 spec files started at 2020-07-05T23:30:51.065Z

[0-0] RUNNING in Android - /specs/ballotMainTest.js
[0-0] 2020-07-05T23:30:51.811Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session
[0-0] 2020-07-05T23:30:51.815Z INFO webdriver: DATA {
  capabilities: {
    alwaysMatch: {
      name: 'ballotMainTest: Samsung Galaxy Tab S6',
      build: 'Brandon: Sun Jul 05 2020',
      device: 'Samsung Galaxy Tab S6',
      os: '',
      os_version: '9.0',
      app: 'bs://8eb0f28da756759fad9975c51d5718e3d01d42dc',
      browserName: 'Android',
      browser_version: '',
      real_mobile: true,
      acceptSslCerts: true,
      'browserstack.console': 'info',
      'browserstack.appium_version': '1.17.0',
      'browserstack.local': false,
      'browser.geoLocation': 'US',
      isAndroid: true,
      isCordovaFromAppStore: true,
      isIOS: false,
      isMobileScreenSize: false
    },
    firstMatch: [ {} ]
  },
  desiredCapabilities: {
    name: 'ballotMainTest: Samsung Galaxy Tab S6',
    build: 'Brandon: Sun Jul 05 2020',
    device: 'Samsung Galaxy Tab S6',
    os: '',
    os_version: '9.0',
    app: 'bs://8eb0f28da756759fad9975c51d5718e3d01d42dc',
    browserName: 'Android',
    browser_version: '',
    real_mobile: true,
    acceptSslCerts: true,
    'browserstack.console': 'info',
    'browserstack.appium_version': '1.17.0',
    'browserstack.local': false,
    'browser.geoLocation': 'US',
    isAndroid: true,
    isCordovaFromAppStore: true,
    isIOS: false,
    isMobileScreenSize: false
  }
}
[3-0] RUNNING in Android - /specs/ballotMainTest.js
[3-0] 2020-07-05T23:30:51.853Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session
[3-0] 2020-07-05T23:30:51.856Z INFO webdriver: DATA {
  capabilities: {
    alwaysMatch: {
      name: 'ballotMainTest: Samsung Galaxy Tab S3',
      build: 'Brandon: Sun Jul 05 2020',
      device: 'Samsung Galaxy Tab S3',
      os: '',
      os_version: '8.0',
      app: 'bs://8eb0f28da756759fad9975c51d5718e3d01d42dc',
      browserName: 'Android',
      browser_version: '',
      real_mobile: true,
      acceptSslCerts: true,
      'browserstack.console': 'info',
      'browserstack.appium_version': '1.17.0',
      'browserstack.local': false,
      'browser.geoLocation': 'US',
      isAndroid: true,
      isCordovaFromAppStore: true,
      isIOS: false,
      isMobileScreenSize: false
    },
    firstMatch: [ {} ]
  },
  desiredCapabilities: {
    name: 'ballotMainTest: Samsung Galaxy Tab S3',
    build: 'Brandon: Sun Jul 05 2020',
    device: 'Samsung Galaxy Tab S3',
    os: '',
    os_version: '8.0',
    app: 'bs://8eb0f28da756759fad9975c51d5718e3d01d42dc',
    browserName: 'Android',
    browser_version: '',
    real_mobile: true,
    acceptSslCerts: true,
    'browserstack.console': 'info',
    'browserstack.appium_version': '1.17.0',
    'browserstack.local': false,
    'browser.geoLocation': 'US',
    isAndroid: true,
    isCordovaFromAppStore: true,
    isIOS: false,
    isMobileScreenSize: false
  }
}
[1-0] RUNNING in Android - /specs/ballotMainTest.js
[1-0] 2020-07-05T23:30:51.880Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session
[1-0] 2020-07-05T23:30:51.882Z INFO webdriver: DATA {
  capabilities: {
    alwaysMatch: {
      name: 'ballotMainTest: Samsung Galaxy Tab S5e',
      build: 'Brandon: Sun Jul 05 2020',
      device: 'Samsung Galaxy Tab S5e',
      os: '',
      os_version: '9.0',
      app: 'bs://8eb0f28da756759fad9975c51d5718e3d01d42dc',
      browserName: 'Android',
      browser_version: '',
      real_mobile: true,
      acceptSslCerts: true,
      'browserstack.console': 'info',
      'browserstack.appium_version': '1.17.0',
      'browserstack.local': false,
      'browser.geoLocation': 'US',
      isAndroid: true,
      isCordovaFromAppStore: true,
      isIOS: false,
      isMobileScreenSize: false
    },
    firstMatch: [ {} ]
  },
  desiredCapabilities: {
    name: 'ballotMainTest: Samsung Galaxy Tab S5e',
    build: 'Brandon: Sun Jul 05 2020',
    device: 'Samsung Galaxy Tab S5e',
    os: '',
    os_version: '9.0',
    app: 'bs://8eb0f28da756759fad9975c51d5718e3d01d42dc',
    browserName: 'Android',
    browser_version: '',
    real_mobile: true,
    acceptSslCerts: true,
    'browserstack.console': 'info',
    'browserstack.appium_version': '1.17.0',
    'browserstack.local': false,
    'browser.geoLocation': 'US',
    isAndroid: true,
    isCordovaFromAppStore: true,
    isIOS: false,
    isMobileScreenSize: false
  }
}
[2-0] RUNNING in Android - /specs/ballotMainTest.js
[2-0] 2020-07-05T23:30:51.896Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session
[2-0] 2020-07-05T23:30:51.898Z INFO webdriver: DATA {
  capabilities: {
    alwaysMatch: {
      name: 'ballotMainTest: Samsung Galaxy Tab S4',
      build: 'Brandon: Sun Jul 05 2020',
      device: 'Samsung Galaxy Tab S4',
      os: '',
      os_version: '8.1',
      app: 'bs://8eb0f28da756759fad9975c51d5718e3d01d42dc',
      browserName: 'Android',
      browser_version: '',
      real_mobile: true,
      acceptSslCerts: true,
      'browserstack.console': 'info',
      'browserstack.appium_version': '1.17.0',
      'browserstack.local': false,
      'browser.geoLocation': 'US',
      isAndroid: true,
      isCordovaFromAppStore: true,
      isIOS: false,
      isMobileScreenSize: false
    },
    firstMatch: [ {} ]
  },
  desiredCapabilities: {
    name: 'ballotMainTest: Samsung Galaxy Tab S4',
    build: 'Brandon: Sun Jul 05 2020',
    device: 'Samsung Galaxy Tab S4',
    os: '',
    os_version: '8.1',
    app: 'bs://8eb0f28da756759fad9975c51d5718e3d01d42dc',
    browserName: 'Android',
    browser_version: '',
    real_mobile: true,
    acceptSslCerts: true,
    'browserstack.console': 'info',
    'browserstack.appium_version': '1.17.0',
    'browserstack.local': false,
    'browser.geoLocation': 'US',
    isAndroid: true,
    isCordovaFromAppStore: true,
    isIOS: false,
    isMobileScreenSize: false
  }
}
[0-0] 2020-07-05T23:31:30.174Z INFO webdriver: COMMAND getContexts()
[0-0] 2020-07-05T23:31:30.175Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/contexts
[0-0] 2020-07-05T23:31:30.645Z INFO webdriver: RESULT [ 'NATIVE_APP', 'WEBVIEW_org.wevote.cordova' ]
[0-0] 2020-07-05T23:31:30.647Z INFO webdriver: COMMAND switchContext("WEBVIEW_org.wevote.cordova")
[0-0] 2020-07-05T23:31:30.648Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/context
[0-0] 2020-07-05T23:31:30.648Z INFO webdriver: DATA { name: 'WEBVIEW_org.wevote.cordova' }
[1-0] 2020-07-05T23:31:34.002Z INFO webdriver: COMMAND getContexts()
[1-0] 2020-07-05T23:31:34.005Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/contexts
[1-0] 2020-07-05T23:31:34.404Z INFO webdriver: RESULT [ 'NATIVE_APP', 'WEBVIEW_org.wevote.cordova' ]
[1-0] 2020-07-05T23:31:34.405Z INFO webdriver: COMMAND switchContext("WEBVIEW_org.wevote.cordova")
[1-0] 2020-07-05T23:31:34.406Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/context
[1-0] 2020-07-05T23:31:34.406Z INFO webdriver: DATA { name: 'WEBVIEW_org.wevote.cordova' }
[0-0] 2020-07-05T23:31:34.473Z INFO webdriver: COMMAND findElement("css selector", "div[data-index="0"] .intro-story__btn--bottom")
[0-0] 2020-07-05T23:31:34.474Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
[0-0] 2020-07-05T23:31:34.474Z INFO webdriver: DATA {
  using: 'css selector',
  value: 'div[data-index="0"] .intro-story__btn--bottom'
}
[0-0] 2020-07-05T23:31:34.681Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-1',
  ELEMENT: '0.4572082752744464-1'
}
[0-0] 2020-07-05T23:31:34.703Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-1")
[0-0] 2020-07-05T23:31:34.703Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-1/displayed
[0-0] 2020-07-05T23:31:34.951Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:31:34.952Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-07-05T23:31:34.953Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/execute/sync
[0-0] 2020-07-05T23:31:34.953Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-1',
      ELEMENT: '0.4572082752744464-1'
    }
  ]
}
[0-0] 2020-07-05T23:31:35.179Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:31:35.180Z INFO webdriver: COMMAND elementClick("0.4572082752744464-1")
[0-0] 2020-07-05T23:31:35.180Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-1/click
[0-0] 2020-07-05T23:31:38.187Z INFO webdriver: COMMAND findElement("css selector", "div[data-index="1"] .intro-story__btn--bottom")
2020-07-05T23:31:38.187Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
2020-07-05T23:31:38.187Z INFO webdriver: DATA {
  using: 'css selector',
  value: 'div[data-index="1"] .intro-story__btn--bottom'
}
[1-0] 2020-07-05T23:31:38.359Z INFO webdriver: COMMAND findElement("css selector", "div[data-index="0"] .intro-story__btn--bottom")
[1-0] 2020-07-05T23:31:38.360Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:31:38.360Z INFO webdriver: DATA {
  using: 'css selector',
  value: 'div[data-index="0"] .intro-story__btn--bottom'
}
[0-0] 2020-07-05T23:31:38.404Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-2',
  ELEMENT: '0.4572082752744464-2'
}
[0-0] 2020-07-05T23:31:38.412Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-2")
[0-0] 2020-07-05T23:31:38.412Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-2/displayed
[1-0] 2020-07-05T23:31:38.582Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-1',
  ELEMENT: '0.18933346895215597-1'
}
[1-0] 2020-07-05T23:31:38.604Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-1")
[1-0] 2020-07-05T23:31:38.605Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-1/displayed
[0-0] 2020-07-05T23:31:38.641Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:31:38.643Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-07-05T23:31:38.644Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/execute/sync
[0-0] 2020-07-05T23:31:38.644Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-2',
      ELEMENT: '0.4572082752744464-2'
    }
  ]
}
[0-0] 2020-07-05T23:31:38.842Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:31:38.843Z INFO webdriver: COMMAND elementClick("0.4572082752744464-2")
[0-0] 2020-07-05T23:31:38.843Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-2/click
[1-0] 2020-07-05T23:31:38.866Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:31:38.867Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
2020-07-05T23:31:38.867Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/execute/sync
[1-0] 2020-07-05T23:31:38.867Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-1',
      ELEMENT: '0.18933346895215597-1'
    }
  ]
}
[1-0] 2020-07-05T23:31:39.070Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:31:39.071Z INFO webdriver: COMMAND elementClick("0.18933346895215597-1")
[1-0] 2020-07-05T23:31:39.071Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-1/click
[2-0] 2020-07-05T23:31:39.303Z INFO webdriver: COMMAND getContexts()
[2-0] 2020-07-05T23:31:39.304Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/contexts
[2-0] 2020-07-05T23:31:39.759Z INFO webdriver: RESULT [ 'NATIVE_APP', 'WEBVIEW_org.wevote.cordova' ]
[2-0] 2020-07-05T23:31:39.760Z INFO webdriver: COMMAND switchContext("WEBVIEW_org.wevote.cordova")
[2-0] 2020-07-05T23:31:39.760Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/context
[2-0] 2020-07-05T23:31:39.760Z INFO webdriver: DATA { name: 'WEBVIEW_org.wevote.cordova' }
[0-0] 2020-07-05T23:31:41.740Z INFO webdriver: COMMAND findElement("css selector", "div[data-index="2"] .intro-story__btn--bottom")
[0-0] 2020-07-05T23:31:41.740Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
[0-0] 2020-07-05T23:31:41.740Z INFO webdriver: DATA {
  using: 'css selector',
  value: 'div[data-index="2"] .intro-story__btn--bottom'
}
[0-0] 2020-07-05T23:31:41.950Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-3',
  ELEMENT: '0.4572082752744464-3'
}
[0-0] 2020-07-05T23:31:41.960Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-3")
[0-0] 2020-07-05T23:31:41.961Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-3/displayed
[1-0] 2020-07-05T23:31:42.020Z INFO webdriver: COMMAND findElement("css selector", "div[data-index="1"] .intro-story__btn--bottom")
[1-0] 2020-07-05T23:31:42.021Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:31:42.021Z INFO webdriver: DATA {
  using: 'css selector',
  value: 'div[data-index="1"] .intro-story__btn--bottom'
}
[0-0] 2020-07-05T23:31:42.174Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:31:42.175Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-07-05T23:31:42.176Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/execute/sync
[0-0] 2020-07-05T23:31:42.176Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-3',
      ELEMENT: '0.4572082752744464-3'
    }
  ]
}
[1-0] 2020-07-05T23:31:42.233Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-2',
  ELEMENT: '0.18933346895215597-2'
}
[1-0] 2020-07-05T23:31:42.246Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-2")
[1-0] 2020-07-05T23:31:42.247Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-2/displayed
[0-0] 2020-07-05T23:31:42.367Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:31:42.367Z INFO webdriver: COMMAND elementClick("0.4572082752744464-3")
[0-0] 2020-07-05T23:31:42.368Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-3/click
[1-0] 2020-07-05T23:31:42.467Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:31:42.468Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[1-0] 2020-07-05T23:31:42.468Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/execute/sync
[1-0] 2020-07-05T23:31:42.469Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-2',
      ELEMENT: '0.18933346895215597-2'
    }
  ]
}
[1-0] 2020-07-05T23:31:42.665Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:31:42.666Z INFO webdriver: COMMAND elementClick("0.18933346895215597-2")
[1-0] 2020-07-05T23:31:42.666Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-2/click
[2-0] 2020-07-05T23:31:43.962Z INFO webdriver: COMMAND findElement("css selector", "div[data-index="0"] .intro-story__btn--bottom")
[2-0] 2020-07-05T23:31:43.962Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[2-0] 2020-07-05T23:31:43.962Z INFO webdriver: DATA {
  using: 'css selector',
  value: 'div[data-index="0"] .intro-story__btn--bottom'
}
[2-0] 2020-07-05T23:31:44.263Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-1',
  ELEMENT: '0.21810297461574035-1'
}
[2-0] 2020-07-05T23:31:44.279Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-1")
[2-0] 2020-07-05T23:31:44.280Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-1/displayed
[2-0] 2020-07-05T23:31:44.497Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:31:44.498Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[2-0] 2020-07-05T23:31:44.498Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/execute/sync
[2-0] 2020-07-05T23:31:44.498Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-1',
      ELEMENT: '0.21810297461574035-1'
    }
  ]
}
[2-0] 2020-07-05T23:31:44.703Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:31:44.705Z INFO webdriver: COMMAND elementClick("0.21810297461574035-1")
[2-0] 2020-07-05T23:31:44.705Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-1/click
[1-0] 2020-07-05T23:31:45.606Z INFO webdriver: COMMAND findElement("css selector", "div[data-index="2"] .intro-story__btn--bottom")
[1-0] 2020-07-05T23:31:45.606Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:31:45.607Z INFO webdriver: DATA {
  using: 'css selector',
  value: 'div[data-index="2"] .intro-story__btn--bottom'
}
[0-0] 2020-07-05T23:31:45.753Z INFO webdriver: COMMAND findElement("css selector", "#ballotTabFooterBar")
[0-0] 2020-07-05T23:31:45.754Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
[0-0] 2020-07-05T23:31:45.754Z INFO webdriver: DATA { using: 'css selector', value: '#ballotTabFooterBar' }
[1-0] 2020-07-05T23:31:45.829Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-3',
  ELEMENT: '0.18933346895215597-3'
}
[1-0] 2020-07-05T23:31:45.840Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-3")
[1-0] 2020-07-05T23:31:45.841Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-3/displayed
[0-0] 2020-07-05T23:31:45.970Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-4',
  ELEMENT: '0.4572082752744464-4'
}
[0-0] 2020-07-05T23:31:45.982Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-4")
[0-0] 2020-07-05T23:31:45.983Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-4/displayed
[1-0] 2020-07-05T23:31:46.033Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:31:46.034Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[1-0] 2020-07-05T23:31:46.034Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/execute/sync
[1-0] 2020-07-05T23:31:46.034Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-3',
      ELEMENT: '0.18933346895215597-3'
    }
  ]
}
[0-0] 2020-07-05T23:31:46.196Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:31:46.196Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-07-05T23:31:46.197Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/execute/sync
[0-0] 2020-07-05T23:31:46.197Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-4',
      ELEMENT: '0.4572082752744464-4'
    }
  ]
}
[1-0] 2020-07-05T23:31:46.234Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:31:46.235Z INFO webdriver: COMMAND elementClick("0.18933346895215597-3")
[1-0] 2020-07-05T23:31:46.235Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-3/click
[0-0] 2020-07-05T23:31:46.396Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:31:46.397Z INFO webdriver: COMMAND elementClick("0.4572082752744464-4")
[0-0] 2020-07-05T23:31:46.397Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-4/click
[2-0] 2020-07-05T23:31:47.800Z INFO webdriver: COMMAND findElement("css selector", "div[data-index="1"] .intro-story__btn--bottom")
[2-0] 2020-07-05T23:31:47.800Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[2-0] 2020-07-05T23:31:47.800Z INFO webdriver: DATA {
  using: 'css selector',
  value: 'div[data-index="1"] .intro-story__btn--bottom'
}
[3-0] 2020-07-05T23:31:47.853Z INFO webdriver: COMMAND getContexts()
[3-0] 2020-07-05T23:31:47.854Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/contexts
[2-0] 2020-07-05T23:31:48.069Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-2',
  ELEMENT: '0.21810297461574035-2'
}
[2-0] 2020-07-05T23:31:48.083Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-2")
[2-0] 2020-07-05T23:31:48.084Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-2/displayed
[2-0] 2020-07-05T23:31:48.298Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:31:48.299Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[2-0] 2020-07-05T23:31:48.299Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/execute/sync
[2-0] 2020-07-05T23:31:48.299Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-2',
      ELEMENT: '0.21810297461574035-2'
    }
  ]
}
[3-0] 2020-07-05T23:31:48.305Z INFO webdriver: RESULT [ 'NATIVE_APP', 'WEBVIEW_org.wevote.cordova', 'WEBVIEW_Terrace' ]
[3-0] 2020-07-05T23:31:48.307Z INFO webdriver: COMMAND switchContext("WEBVIEW_org.wevote.cordova")
[3-0] 2020-07-05T23:31:48.307Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/context
[3-0] 2020-07-05T23:31:48.308Z INFO webdriver: DATA { name: 'WEBVIEW_org.wevote.cordova' }
[2-0] 2020-07-05T23:31:48.521Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:31:48.522Z INFO webdriver: COMMAND elementClick("0.21810297461574035-2")
2020-07-05T23:31:48.522Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-2/click
[1-0] 2020-07-05T23:31:50.400Z INFO webdriver: COMMAND findElement("css selector", "#ballotTabFooterBar")
[1-0] 2020-07-05T23:31:50.401Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:31:50.401Z INFO webdriver: DATA { using: 'css selector', value: '#ballotTabFooterBar' }
[1-0] 2020-07-05T23:31:50.638Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-4',
  ELEMENT: '0.18933346895215597-4'
}
[1-0] 2020-07-05T23:31:50.644Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-4")
[1-0] 2020-07-05T23:31:50.645Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-4/displayed
[1-0] 2020-07-05T23:31:50.920Z INFO webdriver: RESULT true
2020-07-05T23:31:50.921Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
2020-07-05T23:31:50.921Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/execute/sync
2020-07-05T23:31:50.921Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-4',
      ELEMENT: '0.18933346895215597-4'
    }
  ]
}
[1-0] 2020-07-05T23:31:51.203Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:31:51.204Z INFO webdriver: COMMAND elementClick("0.18933346895215597-4")
[1-0] 2020-07-05T23:31:51.204Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-4/click
[2-0] 2020-07-05T23:31:51.361Z INFO webdriver: COMMAND findElement("css selector", "div[data-index="2"] .intro-story__btn--bottom")
[2-0] 2020-07-05T23:31:51.361Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
2020-07-05T23:31:51.362Z INFO webdriver: DATA {
  using: 'css selector',
  value: 'div[data-index="2"] .intro-story__btn--bottom'
}
[2-0] 2020-07-05T23:31:51.587Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-3',
  ELEMENT: '0.21810297461574035-3'
}
[2-0] 2020-07-05T23:31:51.591Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-3")
[2-0] 2020-07-05T23:31:51.592Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-3/displayed
[2-0] 2020-07-05T23:31:51.838Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:31:51.841Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[2-0] 2020-07-05T23:31:51.843Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/execute/sync
[2-0] 2020-07-05T23:31:51.843Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-3',
      ELEMENT: '0.21810297461574035-3'
    }
  ]
}
[2-0] 2020-07-05T23:31:52.044Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:31:52.044Z INFO webdriver: COMMAND elementClick("0.21810297461574035-3")
[2-0] 2020-07-05T23:31:52.044Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-3/click
[3-0] 2020-07-05T23:31:52.924Z INFO webdriver: COMMAND findElement("css selector", "div[data-index="0"] .intro-story__btn--bottom")
[3-0] 2020-07-05T23:31:52.925Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
[3-0] 2020-07-05T23:31:52.925Z INFO webdriver: DATA {
  using: 'css selector',
  value: 'div[data-index="0"] .intro-story__btn--bottom'
}
[3-0] 2020-07-05T23:31:53.209Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-1',
  ELEMENT: '0.04511222181228458-1'
}
[3-0] 2020-07-05T23:31:53.219Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-1")
[3-0] 2020-07-05T23:31:53.219Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-1/displayed
[3-0] 2020-07-05T23:31:53.473Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:31:53.473Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[3-0] 2020-07-05T23:31:53.474Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/execute/sync
[3-0] 2020-07-05T23:31:53.474Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-1',
      ELEMENT: '0.04511222181228458-1'
    }
  ]
}
[3-0] 2020-07-05T23:31:53.699Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:31:53.700Z INFO webdriver: COMMAND elementClick("0.04511222181228458-1")
[3-0] 2020-07-05T23:31:53.700Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-1/click
[0-0] 2020-07-05T23:31:55.640Z INFO webdriver: COMMAND findElement("css selector", "#editAddressOneHorizontalRowTextForMapSearch")
[0-0] 2020-07-05T23:31:55.640Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
[0-0] 2020-07-05T23:31:55.641Z INFO webdriver: DATA {
  using: 'css selector',
  value: '#editAddressOneHorizontalRowTextForMapSearch'
}
[2-0] 2020-07-05T23:31:55.657Z INFO webdriver: COMMAND findElement("css selector", "#ballotTabFooterBar")
[2-0] 2020-07-05T23:31:55.658Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[2-0] 2020-07-05T23:31:55.658Z INFO webdriver: DATA { using: 'css selector', value: '#ballotTabFooterBar' }
[2-0] 2020-07-05T23:31:55.937Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-4',
  ELEMENT: '0.21810297461574035-4'
}
[0-0] 2020-07-05T23:31:55.937Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-5',
  ELEMENT: '0.4572082752744464-5'
}
[2-0] 2020-07-05T23:31:55.949Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-4")
[2-0] 2020-07-05T23:31:55.949Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-4/displayed
[2-0] 2020-07-05T23:31:56.244Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:31:56.244Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[2-0] 2020-07-05T23:31:56.244Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/execute/sync
[2-0] 2020-07-05T23:31:56.244Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-4',
      ELEMENT: '0.21810297461574035-4'
    }
  ]
}
[2-0] 2020-07-05T23:31:56.618Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:31:56.618Z INFO webdriver: COMMAND elementClick("0.21810297461574035-4")
[2-0] 2020-07-05T23:31:56.618Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-4/click
[3-0] 2020-07-05T23:31:57.015Z INFO webdriver: COMMAND findElement("css selector", "div[data-index="1"] .intro-story__btn--bottom")
[3-0] 2020-07-05T23:31:57.015Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
2020-07-05T23:31:57.015Z INFO webdriver: DATA {
  using: 'css selector',
  value: 'div[data-index="1"] .intro-story__btn--bottom'
}
[3-0] 2020-07-05T23:31:57.370Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-2',
  ELEMENT: '0.04511222181228458-2'
}
[3-0] 2020-07-05T23:31:57.375Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-2")
[3-0] 2020-07-05T23:31:57.375Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-2/displayed
[3-0] 2020-07-05T23:31:57.610Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:31:57.611Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[3-0] 2020-07-05T23:31:57.612Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/execute/sync
[3-0] 2020-07-05T23:31:57.612Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-2',
      ELEMENT: '0.04511222181228458-2'
    }
  ]
}
[3-0] 2020-07-05T23:31:57.827Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:31:57.827Z INFO webdriver: COMMAND elementClick("0.04511222181228458-2")
[3-0] 2020-07-05T23:31:57.828Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-2/click
[0-0] 2020-07-05T23:31:58.449Z INFO webdriver: COMMAND elementClear("0.4572082752744464-5")
[0-0] 2020-07-05T23:31:58.450Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-5/clear
[0-0] 2020-07-05T23:31:58.817Z INFO webdriver: COMMAND elementSendKeys("0.4572082752744464-5", "Oakland, CA 94501", <object>)
[0-0] 2020-07-05T23:31:58.825Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-5/value
[0-0] 2020-07-05T23:31:58.826Z INFO webdriver: DATA {
  text: 'Oakland, CA 94501',
  value: [
    'O', 'a', 'k', 'l', 'a',
    'n', 'd', ',', ' ', 'C',
    'A', ' ', '9', '4', '5',
    '0', '1'
  ]
}
[1-0] 2020-07-05T23:32:00.818Z INFO webdriver: COMMAND findElement("css selector", "#editAddressOneHorizontalRowTextForMapSearch")
[1-0] 2020-07-05T23:32:00.818Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:32:00.818Z INFO webdriver: DATA {
  using: 'css selector',
  value: '#editAddressOneHorizontalRowTextForMapSearch'
}
[3-0] 2020-07-05T23:32:00.820Z INFO webdriver: COMMAND findElement("css selector", "div[data-index="2"] .intro-story__btn--bottom")
[3-0] 2020-07-05T23:32:00.821Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
[3-0] 2020-07-05T23:32:00.821Z INFO webdriver: DATA {
  using: 'css selector',
  value: 'div[data-index="2"] .intro-story__btn--bottom'
}
[3-0] 2020-07-05T23:32:01.045Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-3',
  ELEMENT: '0.04511222181228458-3'
}
[3-0] 2020-07-05T23:32:01.050Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-3")
[3-0] 2020-07-05T23:32:01.050Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-3/displayed
[1-0] 2020-07-05T23:32:01.061Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-5',
  ELEMENT: '0.18933346895215597-5'
}
[3-0] 2020-07-05T23:32:01.296Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:32:01.297Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[3-0] 2020-07-05T23:32:01.297Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/execute/sync
[3-0] 2020-07-05T23:32:01.297Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-3',
      ELEMENT: '0.04511222181228458-3'
    }
  ]
}
[3-0] 2020-07-05T23:32:01.509Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:32:01.510Z INFO webdriver: COMMAND elementClick("0.04511222181228458-3")
[3-0] 2020-07-05T23:32:01.510Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-3/click
[0-0] 2020-07-05T23:32:02.531Z INFO webdriver: COMMAND findElement("css selector", "#editAddressOneHorizontalRowSaveButton")
[0-0] 2020-07-05T23:32:02.532Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
[0-0] 2020-07-05T23:32:02.532Z INFO webdriver: DATA {
  using: 'css selector',
  value: '#editAddressOneHorizontalRowSaveButton'
}
[0-0] 2020-07-05T23:32:02.784Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-6',
  ELEMENT: '0.4572082752744464-6'
}
[0-0] 2020-07-05T23:32:02.787Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-6")
[0-0] 2020-07-05T23:32:02.787Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-6/displayed
[0-0] 2020-07-05T23:32:03.105Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:32:03.106Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-07-05T23:32:03.106Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/execute/sync
[0-0] 2020-07-05T23:32:03.106Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-6',
      ELEMENT: '0.4572082752744464-6'
    }
  ]
}
[0-0] 2020-07-05T23:32:03.300Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:32:03.302Z INFO webdriver: COMMAND elementClick("0.4572082752744464-6")
[0-0] 2020-07-05T23:32:03.302Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-6/click
[1-0] 2020-07-05T23:32:03.567Z INFO webdriver: COMMAND elementClear("0.18933346895215597-5")
[1-0] 2020-07-05T23:32:03.568Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-5/clear
[1-0] 2020-07-05T23:32:03.894Z INFO webdriver: COMMAND elementSendKeys("0.18933346895215597-5", "Oakland, CA 94501", <object>)
[1-0] 2020-07-05T23:32:03.899Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-5/value
[1-0] 2020-07-05T23:32:03.899Z INFO webdriver: DATA {
  text: 'Oakland, CA 94501',
  value: [
    'O', 'a', 'k', 'l', 'a',
    'n', 'd', ',', ' ', 'C',
    'A', ' ', '9', '4', '5',
    '0', '1'
  ]
}
[2-0] 2020-07-05T23:32:06.083Z INFO webdriver: COMMAND findElement("css selector", "#editAddressOneHorizontalRowTextForMapSearch")
[2-0] 2020-07-05T23:32:06.084Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[2-0] 2020-07-05T23:32:06.084Z INFO webdriver: DATA {
  using: 'css selector',
  value: '#editAddressOneHorizontalRowTextForMapSearch'
}
[2-0] 2020-07-05T23:32:06.302Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-5',
  ELEMENT: '0.21810297461574035-5'
}
[3-0] 2020-07-05T23:32:06.428Z INFO webdriver: COMMAND findElement("css selector", "#ballotTabFooterBar")
[3-0] 2020-07-05T23:32:06.429Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
[3-0] 2020-07-05T23:32:06.429Z INFO webdriver: DATA { using: 'css selector', value: '#ballotTabFooterBar' }
[3-0] 2020-07-05T23:32:06.687Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-4',
  ELEMENT: '0.04511222181228458-4'
}
[3-0] 2020-07-05T23:32:06.709Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-4")
2020-07-05T23:32:06.710Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-4/displayed
[3-0] 2020-07-05T23:32:07.099Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:32:07.099Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[3-0] 2020-07-05T23:32:07.100Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/execute/sync
[3-0] 2020-07-05T23:32:07.100Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-4',
      ELEMENT: '0.04511222181228458-4'
    }
  ]
}
[3-0] 2020-07-05T23:32:07.312Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:32:07.312Z INFO webdriver: COMMAND elementClick("0.04511222181228458-4")
[3-0] 2020-07-05T23:32:07.312Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-4/click
[1-0] 2020-07-05T23:32:08.270Z INFO webdriver: COMMAND findElement("css selector", "#editAddressOneHorizontalRowSaveButton")
[1-0] 2020-07-05T23:32:08.271Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:32:08.271Z INFO webdriver: DATA {
  using: 'css selector',
  value: '#editAddressOneHorizontalRowSaveButton'
}
[1-0] 2020-07-05T23:32:08.525Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-6',
  ELEMENT: '0.18933346895215597-6'
}
[1-0] 2020-07-05T23:32:08.528Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-6")
[1-0] 2020-07-05T23:32:08.528Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-6/displayed
[2-0] 2020-07-05T23:32:08.813Z INFO webdriver: COMMAND elementClear("0.21810297461574035-5")
[2-0] 2020-07-05T23:32:08.814Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-5/clear
[1-0] 2020-07-05T23:32:08.817Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:32:08.818Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
2020-07-05T23:32:08.818Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/execute/sync
[1-0] 2020-07-05T23:32:08.818Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-6',
      ELEMENT: '0.18933346895215597-6'
    }
  ]
}
[1-0] 2020-07-05T23:32:09.030Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:32:09.030Z INFO webdriver: COMMAND elementClick("0.18933346895215597-6")
[1-0] 2020-07-05T23:32:09.030Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-6/click
[2-0] 2020-07-05T23:32:09.258Z INFO webdriver: COMMAND elementSendKeys("0.21810297461574035-5", "Oakland, CA 94501", <object>)
[2-0] 2020-07-05T23:32:09.262Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-5/value
[2-0] 2020-07-05T23:32:09.262Z INFO webdriver: DATA {
  text: 'Oakland, CA 94501',
  value: [
    'O', 'a', 'k', 'l', 'a',
    'n', 'd', ',', ' ', 'C',
    'A', ' ', '9', '4', '5',
    '0', '1'
  ]
}
[0-0] 2020-07-05T23:32:12.434Z INFO webdriver: COMMAND findElement("css selector", "#changeAddressOrElectionHeaderBarElection")
[0-0] 2020-07-05T23:32:12.434Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
[0-0] 2020-07-05T23:32:12.434Z INFO webdriver: DATA {
  using: 'css selector',
  value: '#changeAddressOrElectionHeaderBarElection'
}
[0-0] 2020-07-05T23:32:12.677Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-7',
  ELEMENT: '0.4572082752744464-7'
}
[0-0] 2020-07-05T23:32:12.682Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-7")
[0-0] 2020-07-05T23:32:12.683Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-7/displayed
[0-0] 2020-07-05T23:32:12.905Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:32:12.905Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-07-05T23:32:12.907Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/execute/sync
[0-0] 2020-07-05T23:32:12.907Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-7',
      ELEMENT: '0.4572082752744464-7'
    }
  ]
}
[0-0] 2020-07-05T23:32:13.105Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:32:13.105Z INFO webdriver: COMMAND elementClick("0.4572082752744464-7")
[0-0] 2020-07-05T23:32:13.106Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-7/click
[2-0] 2020-07-05T23:32:13.629Z INFO webdriver: COMMAND findElement("css selector", "#editAddressOneHorizontalRowSaveButton")
[2-0] 2020-07-05T23:32:13.630Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[2-0] 2020-07-05T23:32:13.630Z INFO webdriver: DATA {
  using: 'css selector',
  value: '#editAddressOneHorizontalRowSaveButton'
}
[2-0] 2020-07-05T23:32:13.864Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-6',
  ELEMENT: '0.21810297461574035-6'
}
[2-0] 2020-07-05T23:32:13.873Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-6")
[2-0] 2020-07-05T23:32:13.873Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-6/displayed
[2-0] 2020-07-05T23:32:14.084Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:32:14.084Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[2-0] 2020-07-05T23:32:14.084Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/execute/sync
[2-0] 2020-07-05T23:32:14.084Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-6',
      ELEMENT: '0.21810297461574035-6'
    }
  ]
}
[2-0] 2020-07-05T23:32:14.288Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:32:14.288Z INFO webdriver: COMMAND elementClick("0.21810297461574035-6")
2020-07-05T23:32:14.288Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-6/click
[0-0] 2020-07-05T23:32:16.360Z INFO webdriver: COMMAND findElement("css selector", "#profileCloseSelectBallotModal")
[0-0] 2020-07-05T23:32:16.360Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
[0-0] 2020-07-05T23:32:16.360Z INFO webdriver: DATA { using: 'css selector', value: '#profileCloseSelectBallotModal' }
[0-0] 2020-07-05T23:32:16.583Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-8',
  ELEMENT: '0.4572082752744464-8'
}
[0-0] 2020-07-05T23:32:16.595Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-8")
2020-07-05T23:32:16.595Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-8/displayed
[0-0] 2020-07-05T23:32:16.811Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:32:16.811Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-07-05T23:32:16.811Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/execute/sync
[0-0] 2020-07-05T23:32:16.812Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-8',
      ELEMENT: '0.4572082752744464-8'
    }
  ]
}
[0-0] 2020-07-05T23:32:17.032Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:32:17.032Z INFO webdriver: COMMAND elementClick("0.4572082752744464-8")
[0-0] 2020-07-05T23:32:17.032Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-8/click
[3-0] 2020-07-05T23:32:17.394Z INFO webdriver: COMMAND findElement("css selector", "#editAddressOneHorizontalRowTextForMapSearch")
[3-0] 2020-07-05T23:32:17.394Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
[3-0] 2020-07-05T23:32:17.394Z INFO webdriver: DATA {
  using: 'css selector',
  value: '#editAddressOneHorizontalRowTextForMapSearch'
}
[3-0] 2020-07-05T23:32:17.674Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-5',
  ELEMENT: '0.04511222181228458-5'
}
[1-0] 2020-07-05T23:32:18.373Z INFO webdriver: COMMAND findElement("css selector", "#changeAddressOrElectionHeaderBarElection")
[1-0] 2020-07-05T23:32:18.374Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:32:18.374Z INFO webdriver: DATA {
  using: 'css selector',
  value: '#changeAddressOrElectionHeaderBarElection'
}
[1-0] 2020-07-05T23:32:18.608Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-7',
  ELEMENT: '0.18933346895215597-7'
}
[1-0] 2020-07-05T23:32:18.613Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-7")
[1-0] 2020-07-05T23:32:18.613Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-7/displayed
[1-0] 2020-07-05T23:32:18.840Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:32:18.840Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[1-0] 2020-07-05T23:32:18.841Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/execute/sync
[1-0] 2020-07-05T23:32:18.841Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-7',
      ELEMENT: '0.18933346895215597-7'
    }
  ]
}
[1-0] 2020-07-05T23:32:19.037Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:32:19.038Z INFO webdriver: COMMAND elementClick("0.18933346895215597-7")
[1-0] 2020-07-05T23:32:19.038Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-7/click
[0-0] 2020-07-05T23:32:19.984Z INFO webdriver: COMMAND findElement("css selector", "#changeAddressOrElectionHeaderBarElection")
[0-0] 2020-07-05T23:32:19.984Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
2020-07-05T23:32:19.984Z INFO webdriver: DATA {
  using: 'css selector',
  value: '#changeAddressOrElectionHeaderBarElection'
}
[3-0] 2020-07-05T23:32:20.180Z INFO webdriver: COMMAND elementClear("0.04511222181228458-5")
[3-0] 2020-07-05T23:32:20.180Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-5/clear
[0-0] 2020-07-05T23:32:20.184Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-7',
  ELEMENT: '0.4572082752744464-7'
}
[0-0] 2020-07-05T23:32:20.190Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-7")
[0-0] 2020-07-05T23:32:20.191Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-7/displayed
[0-0] 2020-07-05T23:32:20.406Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:32:20.406Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-07-05T23:32:20.406Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/execute/sync
[0-0] 2020-07-05T23:32:20.406Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-7',
      ELEMENT: '0.4572082752744464-7'
    }
  ]
}
[3-0] 2020-07-05T23:32:20.496Z INFO webdriver: COMMAND elementSendKeys("0.04511222181228458-5", "Oakland, CA 94501", <object>)
[3-0] 2020-07-05T23:32:20.500Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-5/value
[3-0] 2020-07-05T23:32:20.500Z INFO webdriver: DATA {
  text: 'Oakland, CA 94501',
  value: [
    'O', 'a', 'k', 'l', 'a',
    'n', 'd', ',', ' ', 'C',
    'A', ' ', '9', '4', '5',
    '0', '1'
  ]
}
[0-0] 2020-07-05T23:32:20.601Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:32:20.602Z INFO webdriver: COMMAND elementClick("0.4572082752744464-7")
[0-0] 2020-07-05T23:32:20.602Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-7/click
[1-0] 2020-07-05T23:32:22.746Z INFO webdriver: COMMAND findElement("css selector", "#profileCloseSelectBallotModal")
[1-0] 2020-07-05T23:32:22.746Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
2020-07-05T23:32:22.746Z INFO webdriver: DATA { using: 'css selector', value: '#profileCloseSelectBallotModal' }
[1-0] 2020-07-05T23:32:22.960Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-8',
  ELEMENT: '0.18933346895215597-8'
}
[1-0] 2020-07-05T23:32:22.969Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-8")
[1-0] 2020-07-05T23:32:22.969Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-8/displayed
[1-0] 2020-07-05T23:32:23.193Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:32:23.194Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[1-0] 2020-07-05T23:32:23.194Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/execute/sync
[1-0] 2020-07-05T23:32:23.194Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-8',
      ELEMENT: '0.18933346895215597-8'
    }
  ]
}
[2-0] 2020-07-05T23:32:23.463Z INFO webdriver: COMMAND findElement("css selector", "#changeAddressOrElectionHeaderBarElection")
[2-0] 2020-07-05T23:32:23.464Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[2-0] 2020-07-05T23:32:23.464Z INFO webdriver: DATA {
  using: 'css selector',
  value: '#changeAddressOrElectionHeaderBarElection'
}
[1-0] 2020-07-05T23:32:23.467Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:32:23.467Z INFO webdriver: COMMAND elementClick("0.18933346895215597-8")
[1-0] 2020-07-05T23:32:23.468Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-8/click
[2-0] 2020-07-05T23:32:23.790Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-7',
  ELEMENT: '0.21810297461574035-7'
}
[2-0] 2020-07-05T23:32:23.797Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-7")
[2-0] 2020-07-05T23:32:23.797Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-7/displayed
[0-0] 2020-07-05T23:32:23.830Z INFO webdriver: COMMAND findElement("css selector", "button.SelectBallotModal__PriorButton-sc-1kby1m3-8.kPEgxg")
[0-0] 2020-07-05T23:32:23.830Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
[0-0] 2020-07-05T23:32:23.830Z INFO webdriver: DATA {
  using: 'css selector',
  value: 'button.SelectBallotModal__PriorButton-sc-1kby1m3-8.kPEgxg'
}
[2-0] 2020-07-05T23:32:24.024Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:32:24.025Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[2-0] 2020-07-05T23:32:24.025Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/execute/sync
[2-0] 2020-07-05T23:32:24.025Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-7',
      ELEMENT: '0.21810297461574035-7'
    }
  ]
}
[0-0] 2020-07-05T23:32:24.073Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-9',
  ELEMENT: '0.4572082752744464-9'
}
[0-0] 2020-07-05T23:32:24.078Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-9")
[0-0] 2020-07-05T23:32:24.078Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-9/displayed
[2-0] 2020-07-05T23:32:24.236Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:32:24.237Z INFO webdriver: COMMAND elementClick("0.21810297461574035-7")
[2-0] 2020-07-05T23:32:24.237Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-7/click
[0-0] 2020-07-05T23:32:24.443Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:32:24.443Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-07-05T23:32:24.444Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/execute/sync
[0-0] 2020-07-05T23:32:24.444Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-9',
      ELEMENT: '0.4572082752744464-9'
    }
  ]
}
[0-0] 2020-07-05T23:32:24.643Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:32:24.643Z INFO webdriver: COMMAND elementClick("0.4572082752744464-9")
2020-07-05T23:32:24.644Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-9/click
[3-0] 2020-07-05T23:32:25.757Z INFO webdriver: COMMAND findElement("css selector", "#editAddressOneHorizontalRowSaveButton")
[3-0] 2020-07-05T23:32:25.757Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
[3-0] 2020-07-05T23:32:25.757Z INFO webdriver: DATA {
  using: 'css selector',
  value: '#editAddressOneHorizontalRowSaveButton'
}
[3-0] 2020-07-05T23:32:25.982Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-6',
  ELEMENT: '0.04511222181228458-6'
}
[3-0] 2020-07-05T23:32:25.987Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-6")
[3-0] 2020-07-05T23:32:25.987Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-6/displayed
[3-0] 2020-07-05T23:32:26.241Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:32:26.241Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[3-0] 2020-07-05T23:32:26.241Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/execute/sync
[3-0] 2020-07-05T23:32:26.241Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-6',
      ELEMENT: '0.04511222181228458-6'
    }
  ]
}
[3-0] 2020-07-05T23:32:26.451Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:32:26.451Z INFO webdriver: COMMAND elementClick("0.04511222181228458-6")
[3-0] 2020-07-05T23:32:26.451Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-6/click
[1-0] 2020-07-05T23:32:26.780Z INFO webdriver: COMMAND findElement("css selector", "#changeAddressOrElectionHeaderBarElection")
[1-0] 2020-07-05T23:32:26.781Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:32:26.781Z INFO webdriver: DATA {
  using: 'css selector',
  value: '#changeAddressOrElectionHeaderBarElection'
}
[1-0] 2020-07-05T23:32:26.991Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-7',
  ELEMENT: '0.18933346895215597-7'
}
[1-0] 2020-07-05T23:32:26.996Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-7")
[1-0] 2020-07-05T23:32:26.996Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-7/displayed
[1-0] 2020-07-05T23:32:27.283Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:32:27.283Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[1-0] 2020-07-05T23:32:27.283Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/execute/sync
[1-0] 2020-07-05T23:32:27.284Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-7',
      ELEMENT: '0.18933346895215597-7'
    }
  ]
}
[1-0] 2020-07-05T23:32:27.502Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:32:27.502Z INFO webdriver: COMMAND elementClick("0.18933346895215597-7")
[1-0] 2020-07-05T23:32:27.502Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-7/click
[2-0] 2020-07-05T23:32:27.623Z INFO webdriver: COMMAND findElement("css selector", "#profileCloseSelectBallotModal")
[2-0] 2020-07-05T23:32:27.623Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[2-0] 2020-07-05T23:32:27.623Z INFO webdriver: DATA { using: 'css selector', value: '#profileCloseSelectBallotModal' }
[2-0] 2020-07-05T23:32:27.950Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-8',
  ELEMENT: '0.21810297461574035-8'
}
[2-0] 2020-07-05T23:32:27.958Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-8")
2020-07-05T23:32:27.959Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-8/displayed
[0-0] 2020-07-05T23:32:27.983Z INFO webdriver: COMMAND findElement("css selector", "#ballotElectionListWithFiltersButton-6000")
[0-0] 2020-07-05T23:32:27.983Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
2020-07-05T23:32:27.983Z INFO webdriver: DATA {
  using: 'css selector',
  value: '#ballotElectionListWithFiltersButton-6000'
}
[0-0] 2020-07-05T23:32:28.258Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-10',
  ELEMENT: '0.4572082752744464-10'
}
[0-0] 2020-07-05T23:32:28.264Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-10")
[0-0] 2020-07-05T23:32:28.264Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-10/displayed
[2-0] 2020-07-05T23:32:28.269Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:32:28.269Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
2020-07-05T23:32:28.270Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/execute/sync
2020-07-05T23:32:28.270Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-8',
      ELEMENT: '0.21810297461574035-8'
    }
  ]
}
[0-0] 2020-07-05T23:32:28.565Z INFO webdriver: RESULT true
2020-07-05T23:32:28.565Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
2020-07-05T23:32:28.566Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/execute/sync
[2-0] 2020-07-05T23:32:28.565Z INFO webdriver: RESULT true
2020-07-05T23:32:28.566Z INFO webdriver: COMMAND elementClick("0.21810297461574035-8")
2020-07-05T23:32:28.566Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-8/click
[0-0] 2020-07-05T23:32:28.566Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-10',
      ELEMENT: '0.4572082752744464-10'
    }
  ]
}
[0-0] 2020-07-05T23:32:28.872Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:32:28.873Z INFO webdriver: COMMAND elementClick("0.4572082752744464-10")
[0-0] 2020-07-05T23:32:28.873Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-10/click
[1-0] 2020-07-05T23:32:30.923Z INFO webdriver: COMMAND findElement("css selector", "button.SelectBallotModal__PriorButton-sc-1kby1m3-8.kPEgxg")
[1-0] 2020-07-05T23:32:30.923Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:32:30.923Z INFO webdriver: DATA {
  using: 'css selector',
  value: 'button.SelectBallotModal__PriorButton-sc-1kby1m3-8.kPEgxg'
}
[1-0] 2020-07-05T23:32:31.169Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-9',
  ELEMENT: '0.18933346895215597-9'
}
[1-0] 2020-07-05T23:32:31.173Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-9")
[1-0] 2020-07-05T23:32:31.173Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-9/displayed
[2-0] 2020-07-05T23:32:31.551Z INFO webdriver: COMMAND findElement("css selector", "#changeAddressOrElectionHeaderBarElection")
[2-0] 2020-07-05T23:32:31.552Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[2-0] 2020-07-05T23:32:31.552Z INFO webdriver: DATA {
  using: 'css selector',
  value: '#changeAddressOrElectionHeaderBarElection'
}
[1-0] 2020-07-05T23:32:31.557Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:32:31.558Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[1-0] 2020-07-05T23:32:31.560Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/execute/sync
[1-0] 2020-07-05T23:32:31.560Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-9',
      ELEMENT: '0.18933346895215597-9'
    }
  ]
}
[2-0] 2020-07-05T23:32:31.757Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-7',
  ELEMENT: '0.21810297461574035-7'
}
[2-0] 2020-07-05T23:32:31.763Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-7")
[2-0] 2020-07-05T23:32:31.763Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-7/displayed
[1-0] 2020-07-05T23:32:31.778Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:32:31.778Z INFO webdriver: COMMAND elementClick("0.18933346895215597-9")
[1-0] 2020-07-05T23:32:31.779Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-9/click
[2-0] 2020-07-05T23:32:31.956Z INFO webdriver: RESULT true
2020-07-05T23:32:31.956Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
2020-07-05T23:32:31.957Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/execute/sync
2020-07-05T23:32:31.957Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-7',
      ELEMENT: '0.21810297461574035-7'
    }
  ]
}
[2-0] 2020-07-05T23:32:32.188Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:32:32.188Z INFO webdriver: COMMAND elementClick("0.21810297461574035-7")
2020-07-05T23:32:32.189Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-7/click
[1-0] 2020-07-05T23:32:35.404Z INFO webdriver: COMMAND findElement("css selector", "#ballotElectionListWithFiltersButton-6000")
[1-0] 2020-07-05T23:32:35.404Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:32:35.404Z INFO webdriver: DATA {
  using: 'css selector',
  value: '#ballotElectionListWithFiltersButton-6000'
}
[1-0] 2020-07-05T23:32:35.625Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-10',
  ELEMENT: '0.18933346895215597-10'
}
[1-0] 2020-07-05T23:32:35.628Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-10")
[1-0] 2020-07-05T23:32:35.628Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-10/displayed
[2-0] 2020-07-05T23:32:35.713Z INFO webdriver: COMMAND findElement("css selector", "button.SelectBallotModal__PriorButton-sc-1kby1m3-8.kPEgxg")
[2-0] 2020-07-05T23:32:35.713Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[2-0] 2020-07-05T23:32:35.713Z INFO webdriver: DATA {
  using: 'css selector',
  value: 'button.SelectBallotModal__PriorButton-sc-1kby1m3-8.kPEgxg'
}
[3-0] 2020-07-05T23:32:35.795Z INFO webdriver: COMMAND findElement("css selector", "#changeAddressOrElectionHeaderBarElection")
[3-0] 2020-07-05T23:32:35.795Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
[3-0] 2020-07-05T23:32:35.795Z INFO webdriver: DATA {
  using: 'css selector',
  value: '#changeAddressOrElectionHeaderBarElection'
}
[1-0] 2020-07-05T23:32:35.851Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:32:35.851Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[1-0] 2020-07-05T23:32:35.851Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/execute/sync
[1-0] 2020-07-05T23:32:35.851Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-10',
      ELEMENT: '0.18933346895215597-10'
    }
  ]
}
[2-0] 2020-07-05T23:32:35.941Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-9',
  ELEMENT: '0.21810297461574035-9'
}
[2-0] 2020-07-05T23:32:35.948Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-9")
[2-0] 2020-07-05T23:32:35.948Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-9/displayed
[3-0] 2020-07-05T23:32:36.023Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-7',
  ELEMENT: '0.04511222181228458-7'
}
[3-0] 2020-07-05T23:32:36.032Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-7")
[3-0] 2020-07-05T23:32:36.032Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-7/displayed
[1-0] 2020-07-05T23:32:36.074Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:32:36.074Z INFO webdriver: COMMAND elementClick("0.18933346895215597-10")
[1-0] 2020-07-05T23:32:36.074Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-10/click
[2-0] 2020-07-05T23:32:36.263Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:32:36.263Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[2-0] 2020-07-05T23:32:36.264Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/execute/sync
[2-0] 2020-07-05T23:32:36.264Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-9',
      ELEMENT: '0.21810297461574035-9'
    }
  ]
}
[3-0] 2020-07-05T23:32:36.274Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:32:36.274Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[3-0] 2020-07-05T23:32:36.275Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/execute/sync
[3-0] 2020-07-05T23:32:36.275Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-7',
      ELEMENT: '0.04511222181228458-7'
    }
  ]
}
[2-0] 2020-07-05T23:32:36.488Z INFO webdriver: RESULT true
2020-07-05T23:32:36.488Z INFO webdriver: COMMAND elementClick("0.21810297461574035-9")
2020-07-05T23:32:36.489Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-9/click
[3-0] 2020-07-05T23:32:36.488Z INFO webdriver: RESULT true
2020-07-05T23:32:36.488Z INFO webdriver: COMMAND elementClick("0.04511222181228458-7")
2020-07-05T23:32:36.489Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-7/click
[0-0] 2020-07-05T23:32:37.994Z INFO webdriver: COMMAND findElement("css selector", "#ballotBadgeMobileAndDesktop-All")
[0-0] 2020-07-05T23:32:37.995Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
[0-0] 2020-07-05T23:32:37.995Z INFO webdriver: DATA { using: 'css selector', value: '#ballotBadgeMobileAndDesktop-All' }
[0-0] 2020-07-05T23:32:38.332Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-11',
  ELEMENT: '0.4572082752744464-11'
}
[0-0] 2020-07-05T23:32:38.340Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-11")
[0-0] 2020-07-05T23:32:38.340Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-11/displayed
[0-0] 2020-07-05T23:32:38.566Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:32:38.567Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-07-05T23:32:38.567Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/execute/sync
[0-0] 2020-07-05T23:32:38.567Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-11',
      ELEMENT: '0.4572082752744464-11'
    }
  ]
}
[0-0] 2020-07-05T23:32:38.753Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:32:38.753Z INFO webdriver: COMMAND elementClick("0.4572082752744464-11")
[0-0] 2020-07-05T23:32:38.754Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-11/click
[2-0] 2020-07-05T23:32:39.923Z INFO webdriver: COMMAND findElement("css selector", "#ballotElectionListWithFiltersButton-6000")
[2-0] 2020-07-05T23:32:39.924Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[2-0] 2020-07-05T23:32:39.924Z INFO webdriver: DATA {
  using: 'css selector',
  value: '#ballotElectionListWithFiltersButton-6000'
}
[2-0] 2020-07-05T23:32:40.135Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-10',
  ELEMENT: '0.21810297461574035-10'
}
[2-0] 2020-07-05T23:32:40.142Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-10")
[2-0] 2020-07-05T23:32:40.142Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-10/displayed
[2-0] 2020-07-05T23:32:40.377Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:32:40.377Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[2-0] 2020-07-05T23:32:40.377Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/execute/sync
[2-0] 2020-07-05T23:32:40.377Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-10',
      ELEMENT: '0.21810297461574035-10'
    }
  ]
}
[2-0] 2020-07-05T23:32:40.602Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:32:40.603Z INFO webdriver: COMMAND elementClick("0.21810297461574035-10")
[2-0] 2020-07-05T23:32:40.603Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-10/click
[0-0] 2020-07-05T23:32:41.859Z INFO webdriver: COMMAND findElement("css selector", "#ballotBadgeDesktop-Local")
[0-0] 2020-07-05T23:32:41.860Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
[0-0] 2020-07-05T23:32:41.860Z INFO webdriver: DATA { using: 'css selector', value: '#ballotBadgeDesktop-Local' }
[3-0] 2020-07-05T23:32:41.978Z INFO webdriver: COMMAND findElement("css selector", "#profileCloseSelectBallotModal")
[3-0] 2020-07-05T23:32:41.979Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
[3-0] 2020-07-05T23:32:41.979Z INFO webdriver: DATA { using: 'css selector', value: '#profileCloseSelectBallotModal' }
[0-0] 2020-07-05T23:32:42.071Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-12',
  ELEMENT: '0.4572082752744464-12'
}
[0-0] 2020-07-05T23:32:42.078Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-12")
2020-07-05T23:32:42.078Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-12/displayed
[3-0] 2020-07-05T23:32:42.194Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-8',
  ELEMENT: '0.04511222181228458-8'
}
[3-0] 2020-07-05T23:32:42.207Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-8")
[3-0] 2020-07-05T23:32:42.208Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-8/displayed
[0-0] 2020-07-05T23:32:42.281Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:32:42.282Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-07-05T23:32:42.282Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/execute/sync
[0-0] 2020-07-05T23:32:42.282Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-12',
      ELEMENT: '0.4572082752744464-12'
    }
  ]
}
[3-0] 2020-07-05T23:32:42.441Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:32:42.441Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[3-0] 2020-07-05T23:32:42.442Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/execute/sync
[3-0] 2020-07-05T23:32:42.442Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-8',
      ELEMENT: '0.04511222181228458-8'
    }
  ]
}
[0-0] 2020-07-05T23:32:42.493Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:32:42.493Z INFO webdriver: COMMAND elementClick("0.4572082752744464-12")
[0-0] 2020-07-05T23:32:42.494Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-12/click
[3-0] 2020-07-05T23:32:42.648Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:32:42.648Z INFO webdriver: COMMAND elementClick("0.04511222181228458-8")
[3-0] 2020-07-05T23:32:42.649Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-8/click
[1-0] 2020-07-05T23:32:45.207Z INFO webdriver: COMMAND findElement("css selector", "#ballotBadgeMobileAndDesktop-All")
[1-0] 2020-07-05T23:32:45.208Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:32:45.208Z INFO webdriver: DATA { using: 'css selector', value: '#ballotBadgeMobileAndDesktop-All' }
[0-0] 2020-07-05T23:32:45.406Z INFO webdriver: COMMAND findElement("css selector", "#ballotBadgeDesktop-State")
[0-0] 2020-07-05T23:32:45.406Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
[0-0] 2020-07-05T23:32:45.406Z INFO webdriver: DATA { using: 'css selector', value: '#ballotBadgeDesktop-State' }
[1-0] 2020-07-05T23:32:45.446Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-11',
  ELEMENT: '0.18933346895215597-11'
}
[1-0] 2020-07-05T23:32:45.450Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-11")
2020-07-05T23:32:45.450Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-11/displayed
[0-0] 2020-07-05T23:32:45.646Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-13',
  ELEMENT: '0.4572082752744464-13'
}
[0-0] 2020-07-05T23:32:45.654Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-13")
2020-07-05T23:32:45.655Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-13/displayed
[1-0] 2020-07-05T23:32:45.681Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:32:45.682Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[1-0] 2020-07-05T23:32:45.682Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/execute/sync
[1-0] 2020-07-05T23:32:45.682Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-11',
      ELEMENT: '0.18933346895215597-11'
    }
  ]
}
[0-0] 2020-07-05T23:32:45.869Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:32:45.870Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-07-05T23:32:45.870Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/execute/sync
[0-0] 2020-07-05T23:32:45.873Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-13',
      ELEMENT: '0.4572082752744464-13'
    }
  ]
}
[1-0] 2020-07-05T23:32:45.898Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:32:45.898Z INFO webdriver: COMMAND elementClick("0.18933346895215597-11")
[1-0] 2020-07-05T23:32:45.900Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-11/click
[0-0] 2020-07-05T23:32:46.094Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:32:46.094Z INFO webdriver: COMMAND elementClick("0.4572082752744464-13")
[0-0] 2020-07-05T23:32:46.095Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-13/click
[3-0] 2020-07-05T23:32:46.218Z INFO webdriver: COMMAND findElement("css selector", "#changeAddressOrElectionHeaderBarElection")
2020-07-05T23:32:46.218Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
2020-07-05T23:32:46.218Z INFO webdriver: DATA {
  using: 'css selector',
  value: '#changeAddressOrElectionHeaderBarElection'
}
[3-0] 2020-07-05T23:32:46.443Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-7',
  ELEMENT: '0.04511222181228458-7'
}
[3-0] 2020-07-05T23:32:46.451Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-7")
[3-0] 2020-07-05T23:32:46.451Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-7/displayed
[3-0] 2020-07-05T23:32:46.831Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:32:46.832Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[3-0] 2020-07-05T23:32:46.832Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/execute/sync
[3-0] 2020-07-05T23:32:46.832Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-7',
      ELEMENT: '0.04511222181228458-7'
    }
  ]
}
[3-0] 2020-07-05T23:32:47.041Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:32:47.041Z INFO webdriver: COMMAND elementClick("0.04511222181228458-7")
[3-0] 2020-07-05T23:32:47.042Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-7/click
[0-0] 2020-07-05T23:32:48.974Z INFO webdriver: COMMAND findElement("css selector", "#ballotBadgeDesktop-Federal")
[0-0] 2020-07-05T23:32:48.974Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
[0-0] 2020-07-05T23:32:48.975Z INFO webdriver: DATA { using: 'css selector', value: '#ballotBadgeDesktop-Federal' }
[1-0] 2020-07-05T23:32:49.034Z INFO webdriver: COMMAND findElement("css selector", "#ballotBadgeDesktop-Local")
[1-0] 2020-07-05T23:32:49.034Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:32:49.034Z INFO webdriver: DATA { using: 'css selector', value: '#ballotBadgeDesktop-Local' }
[0-0] 2020-07-05T23:32:49.198Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-14',
  ELEMENT: '0.4572082752744464-14'
}
[0-0] 2020-07-05T23:32:49.205Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-14")
[0-0] 2020-07-05T23:32:49.205Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-14/displayed
[1-0] 2020-07-05T23:32:49.264Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-12',
  ELEMENT: '0.18933346895215597-12'
}
[1-0] 2020-07-05T23:32:49.270Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-12")
[1-0] 2020-07-05T23:32:49.270Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-12/displayed
[0-0] 2020-07-05T23:32:49.401Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:32:49.402Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-07-05T23:32:49.402Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/execute/sync
[0-0] 2020-07-05T23:32:49.402Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-14',
      ELEMENT: '0.4572082752744464-14'
    }
  ]
}
[1-0] 2020-07-05T23:32:49.477Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:32:49.477Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
2020-07-05T23:32:49.478Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/execute/sync
2020-07-05T23:32:49.478Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-12',
      ELEMENT: '0.18933346895215597-12'
    }
  ]
}
[0-0] 2020-07-05T23:32:49.611Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:32:49.612Z INFO webdriver: COMMAND elementClick("0.4572082752744464-14")
[0-0] 2020-07-05T23:32:49.612Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-14/click
[1-0] 2020-07-05T23:32:49.683Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:32:49.684Z INFO webdriver: COMMAND elementClick("0.18933346895215597-12")
[1-0] 2020-07-05T23:32:49.686Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-12/click
[2-0] 2020-07-05T23:32:49.807Z INFO webdriver: COMMAND findElement("css selector", "#ballotBadgeMobileAndDesktop-All")
[2-0] 2020-07-05T23:32:49.808Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[2-0] 2020-07-05T23:32:49.808Z INFO webdriver: DATA { using: 'css selector', value: '#ballotBadgeMobileAndDesktop-All' }
[2-0] 2020-07-05T23:32:50.042Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-11',
  ELEMENT: '0.21810297461574035-11'
}
[2-0] 2020-07-05T23:32:50.049Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-11")
[2-0] 2020-07-05T23:32:50.050Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-11/displayed
[2-0] 2020-07-05T23:32:50.287Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:32:50.287Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[2-0] 2020-07-05T23:32:50.288Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/execute/sync
[2-0] 2020-07-05T23:32:50.288Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-11',
      ELEMENT: '0.21810297461574035-11'
    }
  ]
}
[2-0] 2020-07-05T23:32:50.482Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:32:50.483Z INFO webdriver: COMMAND elementClick("0.21810297461574035-11")
[2-0] 2020-07-05T23:32:50.484Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-11/click
[3-0] 2020-07-05T23:32:51.274Z INFO webdriver: COMMAND findElement("css selector", "button.SelectBallotModal__PriorButton-sc-1kby1m3-8.kPEgxg")
[3-0] 2020-07-05T23:32:51.275Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
[3-0] 2020-07-05T23:32:51.275Z INFO webdriver: DATA {
  using: 'css selector',
  value: 'button.SelectBallotModal__PriorButton-sc-1kby1m3-8.kPEgxg'
}
[3-0] 2020-07-05T23:32:51.592Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-9',
  ELEMENT: '0.04511222181228458-9'
}
[3-0] 2020-07-05T23:32:51.601Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-9")
[3-0] 2020-07-05T23:32:51.601Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-9/displayed
[3-0] 2020-07-05T23:32:51.856Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:32:51.857Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[3-0] 2020-07-05T23:32:51.857Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/execute/sync
[3-0] 2020-07-05T23:32:51.858Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-9',
      ELEMENT: '0.04511222181228458-9'
    }
  ]
}
[3-0] 2020-07-05T23:32:52.052Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:32:52.053Z INFO webdriver: COMMAND elementClick("0.04511222181228458-9")
[3-0] 2020-07-05T23:32:52.053Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-9/click
[0-0] 2020-07-05T23:32:52.604Z INFO webdriver: COMMAND findElement("css selector", "#ballotBadgeDesktop-Measure")
[0-0] 2020-07-05T23:32:52.605Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
[0-0] 2020-07-05T23:32:52.605Z INFO webdriver: DATA { using: 'css selector', value: '#ballotBadgeDesktop-Measure' }
[1-0] 2020-07-05T23:32:52.626Z INFO webdriver: COMMAND findElement("css selector", "#ballotBadgeDesktop-State")
[1-0] 2020-07-05T23:32:52.627Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:32:52.627Z INFO webdriver: DATA { using: 'css selector', value: '#ballotBadgeDesktop-State' }
[0-0] 2020-07-05T23:32:52.813Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-15',
  ELEMENT: '0.4572082752744464-15'
}
[0-0] 2020-07-05T23:32:52.822Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-15")
[0-0] 2020-07-05T23:32:52.822Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-15/displayed
[1-0] 2020-07-05T23:32:52.841Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-13',
  ELEMENT: '0.18933346895215597-13'
}
[1-0] 2020-07-05T23:32:52.852Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-13")
[1-0] 2020-07-05T23:32:52.852Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-13/displayed
[0-0] 2020-07-05T23:32:53.034Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:32:53.035Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-07-05T23:32:53.035Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/execute/sync
[0-0] 2020-07-05T23:32:53.035Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-15',
      ELEMENT: '0.4572082752744464-15'
    }
  ]
}
[1-0] 2020-07-05T23:32:53.057Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:32:53.058Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[1-0] 2020-07-05T23:32:53.059Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/execute/sync
[1-0] 2020-07-05T23:32:53.059Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-13',
      ELEMENT: '0.18933346895215597-13'
    }
  ]
}
[0-0] 2020-07-05T23:32:53.312Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:32:53.312Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:32:53.313Z INFO webdriver: COMMAND elementClick("0.4572082752744464-15")
2020-07-05T23:32:53.313Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-15/click
[1-0] 2020-07-05T23:32:53.313Z INFO webdriver: COMMAND elementClick("0.18933346895215597-13")
[1-0] 2020-07-05T23:32:53.314Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-13/click
[2-0] 2020-07-05T23:32:53.624Z INFO webdriver: COMMAND findElement("css selector", "#ballotBadgeDesktop-Local")
[2-0] 2020-07-05T23:32:53.625Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[2-0] 2020-07-05T23:32:53.625Z INFO webdriver: DATA { using: 'css selector', value: '#ballotBadgeDesktop-Local' }
[2-0] 2020-07-05T23:32:54.343Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-12',
  ELEMENT: '0.21810297461574035-12'
}
[2-0] 2020-07-05T23:32:54.351Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-12")
[2-0] 2020-07-05T23:32:54.351Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-12/displayed
[2-0] 2020-07-05T23:32:54.789Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:32:54.790Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[2-0] 2020-07-05T23:32:54.791Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/execute/sync
[2-0] 2020-07-05T23:32:54.791Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-12',
      ELEMENT: '0.21810297461574035-12'
    }
  ]
}
[2-0] 2020-07-05T23:32:55.141Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:32:55.142Z INFO webdriver: COMMAND elementClick("0.21810297461574035-12")
[2-0] 2020-07-05T23:32:55.142Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-12/click
[3-0] 2020-07-05T23:32:56.862Z INFO webdriver: COMMAND findElement("css selector", "#ballotElectionListWithFiltersButton-6000")
[3-0] 2020-07-05T23:32:56.862Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
[3-0] 2020-07-05T23:32:56.863Z INFO webdriver: DATA {
  using: 'css selector',
  value: '#ballotElectionListWithFiltersButton-6000'
}
[3-0] 2020-07-05T23:32:57.092Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-10',
  ELEMENT: '0.04511222181228458-10'
}
[3-0] 2020-07-05T23:32:57.100Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-10")
[3-0] 2020-07-05T23:32:57.101Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-10/displayed
[1-0] 2020-07-05T23:32:57.263Z INFO webdriver: COMMAND findElement("css selector", "#ballotBadgeDesktop-Federal")
2020-07-05T23:32:57.264Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
2020-07-05T23:32:57.264Z INFO webdriver: DATA { using: 'css selector', value: '#ballotBadgeDesktop-Federal' }
[0-0] 2020-07-05T23:32:57.275Z INFO webdriver: COMMAND findElement("css selector", "[id^=measureItemCompressedChoiceYes-]")
[0-0] 2020-07-05T23:32:57.275Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
[0-0] 2020-07-05T23:32:57.275Z INFO webdriver: DATA {
  using: 'css selector',
  value: '[id^=measureItemCompressedChoiceYes-]'
}
[3-0] 2020-07-05T23:32:57.348Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:32:57.349Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[3-0] 2020-07-05T23:32:57.349Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/execute/sync
[3-0] 2020-07-05T23:32:57.349Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-10',
      ELEMENT: '0.04511222181228458-10'
    }
  ]
}
[1-0] 2020-07-05T23:32:57.488Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-14',
  ELEMENT: '0.18933346895215597-14'
}
[1-0] 2020-07-05T23:32:57.494Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-14")
[1-0] 2020-07-05T23:32:57.494Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-14/displayed
[0-0] 2020-07-05T23:32:57.499Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-16',
  ELEMENT: '0.4572082752744464-16'
}
[0-0] 2020-07-05T23:32:57.509Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-16")
[0-0] 2020-07-05T23:32:57.509Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-16/displayed
[3-0] 2020-07-05T23:32:57.655Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:32:57.656Z INFO webdriver: COMMAND elementClick("0.04511222181228458-10")
[3-0] 2020-07-05T23:32:57.657Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-10/click
[1-0] 2020-07-05T23:32:57.717Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:32:57.718Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[1-0] 2020-07-05T23:32:57.720Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/execute/sync
[1-0] 2020-07-05T23:32:57.720Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-14',
      ELEMENT: '0.18933346895215597-14'
    }
  ]
}
[0-0] 2020-07-05T23:32:57.739Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:32:57.740Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-07-05T23:32:57.740Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/execute/sync
[0-0] 2020-07-05T23:32:57.740Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-16',
      ELEMENT: '0.4572082752744464-16'
    }
  ]
}
[1-0] 2020-07-05T23:32:58.033Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:32:58.034Z INFO webdriver: COMMAND elementClick("0.18933346895215597-14")
[1-0] 2020-07-05T23:32:58.035Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-14/click
[0-0] 2020-07-05T23:32:58.058Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:32:58.058Z INFO webdriver: COMMAND elementClick("0.4572082752744464-16")
[0-0] 2020-07-05T23:32:58.059Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-16/click
[2-0] 2020-07-05T23:32:58.274Z INFO webdriver: COMMAND findElement("css selector", "#ballotBadgeDesktop-State")
[2-0] 2020-07-05T23:32:58.275Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[2-0] 2020-07-05T23:32:58.275Z INFO webdriver: DATA { using: 'css selector', value: '#ballotBadgeDesktop-State' }
[2-0] 2020-07-05T23:32:58.527Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-13',
  ELEMENT: '0.21810297461574035-13'
}
[2-0] 2020-07-05T23:32:58.535Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-13")
[2-0] 2020-07-05T23:32:58.535Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-13/displayed
[2-0] 2020-07-05T23:32:58.765Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:32:58.765Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[2-0] 2020-07-05T23:32:58.766Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/execute/sync
[2-0] 2020-07-05T23:32:58.766Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-13',
      ELEMENT: '0.21810297461574035-13'
    }
  ]
}
[2-0] 2020-07-05T23:32:58.974Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:32:58.974Z INFO webdriver: COMMAND elementClick("0.21810297461574035-13")
[2-0] 2020-07-05T23:32:58.974Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-13/click
[1-0] 2020-07-05T23:33:01.082Z INFO webdriver: COMMAND findElement("css selector", "#ballotBadgeDesktop-Measure")
[1-0] 2020-07-05T23:33:01.082Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:33:01.082Z INFO webdriver: DATA { using: 'css selector', value: '#ballotBadgeDesktop-Measure' }
[0-0] 2020-07-05T23:33:01.291Z INFO webdriver: COMMAND findElement("css selector", "#filterBaseFilters")
[0-0] 2020-07-05T23:33:01.292Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
[0-0] 2020-07-05T23:33:01.292Z INFO webdriver: DATA { using: 'css selector', value: '#filterBaseFilters' }
[1-0] 2020-07-05T23:33:01.304Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-15',
  ELEMENT: '0.18933346895215597-15'
}
[1-0] 2020-07-05T23:33:01.310Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-15")
[1-0] 2020-07-05T23:33:01.311Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-15/displayed
[0-0] 2020-07-05T23:33:01.508Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-17',
  ELEMENT: '0.4572082752744464-17'
}
[0-0] 2020-07-05T23:33:01.517Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-17")
[0-0] 2020-07-05T23:33:01.518Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-17/displayed
[1-0] 2020-07-05T23:33:01.532Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:33:01.532Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[1-0] 2020-07-05T23:33:01.533Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/execute/sync
[1-0] 2020-07-05T23:33:01.533Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-15',
      ELEMENT: '0.18933346895215597-15'
    }
  ]
}
[1-0] 2020-07-05T23:33:01.728Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:33:01.729Z INFO webdriver: COMMAND elementClick("0.18933346895215597-15")
[1-0] 2020-07-05T23:33:01.730Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-15/click
[2-0] 2020-07-05T23:33:01.927Z INFO webdriver: COMMAND findElement("css selector", "#ballotBadgeDesktop-Federal")
[2-0] 2020-07-05T23:33:01.927Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[0-0] 2020-07-05T23:33:01.927Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:33:01.927Z INFO webdriver: DATA { using: 'css selector', value: '#ballotBadgeDesktop-Federal' }
[0-0] 2020-07-05T23:33:01.928Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-07-05T23:33:01.929Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/execute/sync
[0-0] 2020-07-05T23:33:01.929Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-17',
      ELEMENT: '0.4572082752744464-17'
    }
  ]
}
[2-0] 2020-07-05T23:33:02.149Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-14',
  ELEMENT: '0.21810297461574035-14'
}
[2-0] 2020-07-05T23:33:02.156Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-14")
[2-0] 2020-07-05T23:33:02.156Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-14/displayed
[0-0] 2020-07-05T23:33:02.392Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:33:02.392Z INFO webdriver: COMMAND elementClick("0.4572082752744464-17")
[0-0] 2020-07-05T23:33:02.393Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-17/click
[2-0] 2020-07-05T23:33:02.412Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:33:02.412Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[2-0] 2020-07-05T23:33:02.413Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/execute/sync
[2-0] 2020-07-05T23:33:02.413Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-14',
      ELEMENT: '0.21810297461574035-14'
    }
  ]
}
[2-0] 2020-07-05T23:33:02.616Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:33:02.617Z INFO webdriver: COMMAND elementClick("0.21810297461574035-14")
[2-0] 2020-07-05T23:33:02.617Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-14/click
[1-0] 2020-07-05T23:33:04.764Z INFO webdriver: COMMAND findElement("css selector", "[id^=measureItemCompressedChoiceYes-]")
[1-0] 2020-07-05T23:33:04.765Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:33:04.765Z INFO webdriver: DATA {
  using: 'css selector',
  value: '[id^=measureItemCompressedChoiceYes-]'
}
[1-0] 2020-07-05T23:33:04.995Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-16',
  ELEMENT: '0.18933346895215597-16'
}
[1-0] 2020-07-05T23:33:05.007Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-16")
[1-0] 2020-07-05T23:33:05.007Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-16/displayed
[1-0] 2020-07-05T23:33:05.294Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:33:05.295Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[1-0] 2020-07-05T23:33:05.295Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/execute/sync
[1-0] 2020-07-05T23:33:05.295Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-16',
      ELEMENT: '0.18933346895215597-16'
    }
  ]
}
[0-0] 2020-07-05T23:33:05.487Z INFO webdriver: COMMAND findElement("css selector", "#filterBaseFilters")
[0-0] 2020-07-05T23:33:05.487Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
[0-0] 2020-07-05T23:33:05.488Z INFO webdriver: DATA { using: 'css selector', value: '#filterBaseFilters' }
[1-0] 2020-07-05T23:33:05.514Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:33:05.514Z INFO webdriver: COMMAND elementClick("0.18933346895215597-16")
[1-0] 2020-07-05T23:33:05.514Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-16/click
[2-0] 2020-07-05T23:33:05.546Z INFO webdriver: COMMAND findElement("css selector", "#ballotBadgeDesktop-Measure")
[2-0] 2020-07-05T23:33:05.546Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[2-0] 2020-07-05T23:33:05.546Z INFO webdriver: DATA { using: 'css selector', value: '#ballotBadgeDesktop-Measure' }
[0-0] 2020-07-05T23:33:05.714Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-17',
  ELEMENT: '0.4572082752744464-17'
}
[0-0] 2020-07-05T23:33:05.721Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-17")
[0-0] 2020-07-05T23:33:05.722Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-17/displayed
[2-0] 2020-07-05T23:33:05.807Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-15',
  ELEMENT: '0.21810297461574035-15'
}
[2-0] 2020-07-05T23:33:05.815Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-15")
[2-0] 2020-07-05T23:33:05.815Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-15/displayed
[0-0] 2020-07-05T23:33:05.929Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:33:05.929Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-07-05T23:33:05.930Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/execute/sync
[0-0] 2020-07-05T23:33:05.930Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-17',
      ELEMENT: '0.4572082752744464-17'
    }
  ]
}
[2-0] 2020-07-05T23:33:06.047Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:33:06.047Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[2-0] 2020-07-05T23:33:06.048Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/execute/sync
[2-0] 2020-07-05T23:33:06.048Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-15',
      ELEMENT: '0.21810297461574035-15'
    }
  ]
}
[0-0] 2020-07-05T23:33:06.143Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:33:06.144Z INFO webdriver: COMMAND elementClick("0.4572082752744464-17")
[0-0] 2020-07-05T23:33:06.144Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-17/click
[2-0] 2020-07-05T23:33:06.392Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:33:06.393Z INFO webdriver: COMMAND elementClick("0.21810297461574035-15")
[2-0] 2020-07-05T23:33:06.393Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-15/click
[3-0] 2020-07-05T23:33:07.041Z INFO webdriver: COMMAND findElement("css selector", "#ballotBadgeMobileAndDesktop-All")
[3-0] 2020-07-05T23:33:07.041Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
[3-0] 2020-07-05T23:33:07.041Z INFO webdriver: DATA { using: 'css selector', value: '#ballotBadgeMobileAndDesktop-All' }
[3-0] 2020-07-05T23:33:08.629Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-11',
  ELEMENT: '0.04511222181228458-11'
}
[3-0] 2020-07-05T23:33:08.632Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-11")
[3-0] 2020-07-05T23:33:08.632Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-11/displayed
[0-0] 2020-07-05T23:33:08.973Z INFO webdriver: COMMAND findElement("css selector", "#backToLinkTabHeader")
[0-0] 2020-07-05T23:33:08.974Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
[0-0] 2020-07-05T23:33:08.974Z INFO webdriver: DATA { using: 'css selector', value: '#backToLinkTabHeader' }
[1-0] 2020-07-05T23:33:09.011Z INFO webdriver: COMMAND findElement("css selector", "#filterBaseFilters")
[1-0] 2020-07-05T23:33:09.011Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:33:09.011Z INFO webdriver: DATA { using: 'css selector', value: '#filterBaseFilters' }
[3-0] 2020-07-05T23:33:09.135Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:33:09.136Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[3-0] 2020-07-05T23:33:09.136Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/execute/sync
[3-0] 2020-07-05T23:33:09.136Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-11',
      ELEMENT: '0.04511222181228458-11'
    }
  ]
}
[0-0] 2020-07-05T23:33:09.256Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-18',
  ELEMENT: '0.4572082752744464-18'
}
[1-0] 2020-07-05T23:33:09.258Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-17',
  ELEMENT: '0.18933346895215597-17'
}
[0-0] 2020-07-05T23:33:09.259Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-18")
[0-0] 2020-07-05T23:33:09.259Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-18/displayed
[1-0] 2020-07-05T23:33:09.263Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-17")
[1-0] 2020-07-05T23:33:09.263Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-17/displayed
[3-0] 2020-07-05T23:33:09.365Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:33:09.365Z INFO webdriver: COMMAND elementClick("0.04511222181228458-11")
[3-0] 2020-07-05T23:33:09.365Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-11/click
[2-0] 2020-07-05T23:33:09.404Z INFO webdriver: COMMAND findElement("css selector", "[id^=measureItemCompressedChoiceYes-]")
2020-07-05T23:33:09.404Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
2020-07-05T23:33:09.404Z INFO webdriver: DATA {
  using: 'css selector',
  value: '[id^=measureItemCompressedChoiceYes-]'
}
[0-0] 2020-07-05T23:33:09.478Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:33:09.479Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
2020-07-05T23:33:09.480Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/execute/sync
[0-0] 2020-07-05T23:33:09.480Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-18',
      ELEMENT: '0.4572082752744464-18'
    }
  ]
}
[1-0] 2020-07-05T23:33:09.497Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:33:09.498Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[1-0] 2020-07-05T23:33:09.498Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/execute/sync
[1-0] 2020-07-05T23:33:09.498Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-17',
      ELEMENT: '0.18933346895215597-17'
    }
  ]
}
[1-0] 2020-07-05T23:33:09.874Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:33:09.874Z INFO webdriver: COMMAND elementClick("0.18933346895215597-17")
[1-0] 2020-07-05T23:33:09.875Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-17/click
[0-0] 2020-07-05T23:33:09.904Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:33:09.904Z INFO webdriver: COMMAND elementClick("0.4572082752744464-18")
[0-0] 2020-07-05T23:33:09.905Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-18/click
[2-0] 2020-07-05T23:33:09.933Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-16',
  ELEMENT: '0.21810297461574035-16'
}
[2-0] 2020-07-05T23:33:09.944Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-16")
[2-0] 2020-07-05T23:33:09.944Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-16/displayed
[2-0] 2020-07-05T23:33:10.166Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:33:10.166Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[2-0] 2020-07-05T23:33:10.167Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/execute/sync
[2-0] 2020-07-05T23:33:10.167Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-16',
      ELEMENT: '0.21810297461574035-16'
    }
  ]
}
[2-0] 2020-07-05T23:33:10.401Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:33:10.401Z INFO webdriver: COMMAND elementClick("0.21810297461574035-16")
[2-0] 2020-07-05T23:33:10.402Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-16/click
[3-0] 2020-07-05T23:33:12.626Z INFO webdriver: COMMAND findElement("css selector", "#ballotBadgeDesktop-Local")
[3-0] 2020-07-05T23:33:12.626Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
[3-0] 2020-07-05T23:33:12.626Z INFO webdriver: DATA { using: 'css selector', value: '#ballotBadgeDesktop-Local' }
[1-0] 2020-07-05T23:33:12.846Z INFO webdriver: COMMAND findElement("css selector", "#filterBaseFilters")
[1-0] 2020-07-05T23:33:12.847Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:33:12.847Z INFO webdriver: DATA { using: 'css selector', value: '#filterBaseFilters' }
[3-0] 2020-07-05T23:33:12.847Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-12',
  ELEMENT: '0.04511222181228458-12'
}
[3-0] 2020-07-05T23:33:12.855Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-12")
[3-0] 2020-07-05T23:33:12.855Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-12/displayed
[1-0] 2020-07-05T23:33:13.069Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-17',
  ELEMENT: '0.18933346895215597-17'
}
[1-0] 2020-07-05T23:33:13.077Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-17")
[1-0] 2020-07-05T23:33:13.077Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-17/displayed
[3-0] 2020-07-05T23:33:13.088Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:33:13.089Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[3-0] 2020-07-05T23:33:13.089Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/execute/sync
[3-0] 2020-07-05T23:33:13.090Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-12',
      ELEMENT: '0.04511222181228458-12'
    }
  ]
}
[1-0] 2020-07-05T23:33:13.277Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:33:13.277Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[1-0] 2020-07-05T23:33:13.278Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/execute/sync
[1-0] 2020-07-05T23:33:13.278Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-17',
      ELEMENT: '0.18933346895215597-17'
    }
  ]
}
[3-0] 2020-07-05T23:33:13.355Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:33:13.356Z INFO webdriver: COMMAND elementClick("0.04511222181228458-12")
[3-0] 2020-07-05T23:33:13.356Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-12/click
[1-0] 2020-07-05T23:33:13.488Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:33:13.488Z INFO webdriver: COMMAND elementClick("0.18933346895215597-17")
[1-0] 2020-07-05T23:33:13.489Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-17/click
[2-0] 2020-07-05T23:33:13.783Z INFO webdriver: COMMAND findElement("css selector", "#filterBaseFilters")
[2-0] 2020-07-05T23:33:13.783Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[2-0] 2020-07-05T23:33:13.783Z INFO webdriver: DATA { using: 'css selector', value: '#filterBaseFilters' }
[2-0] 2020-07-05T23:33:13.997Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-17',
  ELEMENT: '0.21810297461574035-17'
}
[2-0] 2020-07-05T23:33:14.004Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-17")
[2-0] 2020-07-05T23:33:14.005Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-17/displayed
[2-0] 2020-07-05T23:33:14.232Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:33:14.232Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[2-0] 2020-07-05T23:33:14.233Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/execute/sync
[2-0] 2020-07-05T23:33:14.233Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-17',
      ELEMENT: '0.21810297461574035-17'
    }
  ]
}
[2-0] 2020-07-05T23:33:14.685Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:33:14.686Z INFO webdriver: COMMAND elementClick("0.21810297461574035-17")
[2-0] 2020-07-05T23:33:14.686Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-17/click
[1-0] 2020-07-05T23:33:16.415Z INFO webdriver: COMMAND findElement("css selector", "#backToLinkTabHeader")
[1-0] 2020-07-05T23:33:16.415Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:33:16.415Z INFO webdriver: DATA { using: 'css selector', value: '#backToLinkTabHeader' }
[3-0] 2020-07-05T23:33:16.673Z INFO webdriver: COMMAND findElement("css selector", "#ballotBadgeDesktop-State")
[3-0] 2020-07-05T23:33:16.674Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
[3-0] 2020-07-05T23:33:16.674Z INFO webdriver: DATA { using: 'css selector', value: '#ballotBadgeDesktop-State' }
[1-0] 2020-07-05T23:33:16.678Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-18',
  ELEMENT: '0.18933346895215597-18'
}
[1-0] 2020-07-05T23:33:16.686Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-18")
[1-0] 2020-07-05T23:33:16.686Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-18/displayed
[3-0] 2020-07-05T23:33:16.892Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-13',
  ELEMENT: '0.04511222181228458-13'
}
[3-0] 2020-07-05T23:33:16.901Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-13")
[3-0] 2020-07-05T23:33:16.901Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-13/displayed
[1-0] 2020-07-05T23:33:16.935Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:33:16.936Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[1-0] 2020-07-05T23:33:16.936Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/execute/sync
2020-07-05T23:33:16.936Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-18',
      ELEMENT: '0.18933346895215597-18'
    }
  ]
}
[3-0] 2020-07-05T23:33:17.130Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:33:17.130Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[3-0] 2020-07-05T23:33:17.131Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/execute/sync
[3-0] 2020-07-05T23:33:17.131Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-13',
      ELEMENT: '0.04511222181228458-13'
    }
  ]
}
[1-0] 2020-07-05T23:33:17.132Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:33:17.133Z INFO webdriver: COMMAND elementClick("0.18933346895215597-18")
[1-0] 2020-07-05T23:33:17.133Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-18/click
[3-0] 2020-07-05T23:33:17.412Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:33:17.413Z INFO webdriver: COMMAND elementClick("0.04511222181228458-13")
[3-0] 2020-07-05T23:33:17.413Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-13/click
[2-0] 2020-07-05T23:33:17.725Z INFO webdriver: COMMAND findElement("css selector", "#filterBaseFilters")
[2-0] 2020-07-05T23:33:17.725Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[2-0] 2020-07-05T23:33:17.725Z INFO webdriver: DATA { using: 'css selector', value: '#filterBaseFilters' }
[2-0] 2020-07-05T23:33:17.954Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-17',
  ELEMENT: '0.21810297461574035-17'
}
[2-0] 2020-07-05T23:33:17.957Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-17")
[2-0] 2020-07-05T23:33:17.957Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-17/displayed
[2-0] 2020-07-05T23:33:18.158Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:33:18.158Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
2020-07-05T23:33:18.159Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/execute/sync
[2-0] 2020-07-05T23:33:18.159Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-17',
      ELEMENT: '0.21810297461574035-17'
    }
  ]
}
[2-0] 2020-07-05T23:33:18.371Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:33:18.372Z INFO webdriver: COMMAND elementClick("0.21810297461574035-17")
[2-0] 2020-07-05T23:33:18.372Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-17/click
[0-0] 2020-07-05T23:33:19.298Z INFO webdriver: COMMAND findElement("css selector", "#ballotBadgeDesktop-Federal")
[0-0] 2020-07-05T23:33:19.301Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
[0-0] 2020-07-05T23:33:19.301Z INFO webdriver: DATA { using: 'css selector', value: '#ballotBadgeDesktop-Federal' }
[0-0] 2020-07-05T23:33:19.594Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-19',
  ELEMENT: '0.4572082752744464-19'
}
[0-0] 2020-07-05T23:33:19.601Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-19")
[0-0] 2020-07-05T23:33:19.601Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-19/displayed
[0-0] 2020-07-05T23:33:19.937Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:33:19.938Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-07-05T23:33:19.938Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/execute/sync
[0-0] 2020-07-05T23:33:19.938Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-19',
      ELEMENT: '0.4572082752744464-19'
    }
  ]
}
[0-0] 2020-07-05T23:33:20.161Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:33:20.162Z INFO webdriver: COMMAND elementClick("0.4572082752744464-19")
[0-0] 2020-07-05T23:33:20.163Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-19/click
[3-0] 2020-07-05T23:33:20.486Z INFO webdriver: COMMAND findElement("css selector", "#ballotBadgeDesktop-Federal")
[3-0] 2020-07-05T23:33:20.487Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
[3-0] 2020-07-05T23:33:20.487Z INFO webdriver: DATA { using: 'css selector', value: '#ballotBadgeDesktop-Federal' }
[3-0] 2020-07-05T23:33:21.210Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-14',
  ELEMENT: '0.04511222181228458-14'
}
[3-0] 2020-07-05T23:33:21.217Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-14")
[3-0] 2020-07-05T23:33:21.218Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-14/displayed
[2-0] 2020-07-05T23:33:21.397Z INFO webdriver: COMMAND findElement("css selector", "#backToLinkTabHeader")
[2-0] 2020-07-05T23:33:21.397Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[2-0] 2020-07-05T23:33:21.398Z INFO webdriver: DATA { using: 'css selector', value: '#backToLinkTabHeader' }
[3-0] 2020-07-05T23:33:21.962Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:33:21.962Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[3-0] 2020-07-05T23:33:21.963Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/execute/sync
[3-0] 2020-07-05T23:33:21.963Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-14',
      ELEMENT: '0.04511222181228458-14'
    }
  ]
}
[2-0] 2020-07-05T23:33:22.035Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-18',
  ELEMENT: '0.21810297461574035-18'
}
[2-0] 2020-07-05T23:33:22.044Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-18")
[2-0] 2020-07-05T23:33:22.044Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-18/displayed
[3-0] 2020-07-05T23:33:22.195Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:33:22.195Z INFO webdriver: COMMAND elementClick("0.04511222181228458-14")
[3-0] 2020-07-05T23:33:22.196Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-14/click
[2-0] 2020-07-05T23:33:22.473Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:33:22.473Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[2-0] 2020-07-05T23:33:22.474Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/execute/sync
[2-0] 2020-07-05T23:33:22.474Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-18',
      ELEMENT: '0.21810297461574035-18'
    }
  ]
}
[2-0] 2020-07-05T23:33:22.673Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:33:22.673Z INFO webdriver: COMMAND elementClick("0.21810297461574035-18")
[2-0] 2020-07-05T23:33:22.674Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-18/click
[0-0] 2020-07-05T23:33:23.146Z INFO webdriver: COMMAND findElement("css selector", "[id^=officeItemCompressedCandidateImageAndName-]")
[0-0] 2020-07-05T23:33:23.147Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
[0-0] 2020-07-05T23:33:23.147Z INFO webdriver: DATA {
  using: 'css selector',
  value: '[id^=officeItemCompressedCandidateImageAndName-]'
}
[0-0] 2020-07-05T23:33:23.389Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-20',
  ELEMENT: '0.4572082752744464-20'
}
[0-0] 2020-07-05T23:33:23.395Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-20")
[0-0] 2020-07-05T23:33:23.395Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-20/displayed
[0-0] 2020-07-05T23:33:23.699Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:33:23.700Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-07-05T23:33:23.701Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/execute/sync
[0-0] 2020-07-05T23:33:23.701Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-20',
      ELEMENT: '0.4572082752744464-20'
    }
  ]
}
[0-0] 2020-07-05T23:33:23.904Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:33:23.906Z INFO webdriver: COMMAND elementClick("0.4572082752744464-20")
[0-0] 2020-07-05T23:33:23.907Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-20/click
[3-0] 2020-07-05T23:33:25.282Z INFO webdriver: COMMAND findElement("css selector", "#ballotBadgeDesktop-Measure")
[3-0] 2020-07-05T23:33:25.282Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
[3-0] 2020-07-05T23:33:25.282Z INFO webdriver: DATA { using: 'css selector', value: '#ballotBadgeDesktop-Measure' }
[3-0] 2020-07-05T23:33:25.651Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-15',
  ELEMENT: '0.04511222181228458-15'
}
[3-0] 2020-07-05T23:33:25.657Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-15")
[3-0] 2020-07-05T23:33:25.657Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-15/displayed
[3-0] 2020-07-05T23:33:25.887Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:33:25.890Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[3-0] 2020-07-05T23:33:25.890Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/execute/sync
[3-0] 2020-07-05T23:33:25.891Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-15',
      ELEMENT: '0.04511222181228458-15'
    }
  ]
}
[3-0] 2020-07-05T23:33:26.109Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:33:26.110Z INFO webdriver: COMMAND elementClick("0.04511222181228458-15")
[3-0] 2020-07-05T23:33:26.111Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-15/click
[1-0] 2020-07-05T23:33:26.674Z INFO webdriver: COMMAND findElement("css selector", "#ballotBadgeDesktop-Federal")
[1-0] 2020-07-05T23:33:26.675Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:33:26.675Z INFO webdriver: DATA { using: 'css selector', value: '#ballotBadgeDesktop-Federal' }
[1-0] 2020-07-05T23:33:26.892Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-19',
  ELEMENT: '0.18933346895215597-19'
}
[1-0] 2020-07-05T23:33:26.899Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-19")
[1-0] 2020-07-05T23:33:26.899Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-19/displayed
[1-0] 2020-07-05T23:33:27.122Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:33:27.123Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[1-0] 2020-07-05T23:33:27.123Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/execute/sync
[1-0] 2020-07-05T23:33:27.123Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-19',
      ELEMENT: '0.18933346895215597-19'
    }
  ]
}
[0-0] 2020-07-05T23:33:27.246Z INFO webdriver: COMMAND findElement("css selector", "#backToLinkTabHeader")
[0-0] 2020-07-05T23:33:27.246Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
[0-0] 2020-07-05T23:33:27.246Z INFO webdriver: DATA { using: 'css selector', value: '#backToLinkTabHeader' }
[1-0] 2020-07-05T23:33:27.334Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:33:27.334Z INFO webdriver: COMMAND elementClick("0.18933346895215597-19")
[1-0] 2020-07-05T23:33:27.335Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-19/click
[0-0] 2020-07-05T23:33:27.448Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-21',
  ELEMENT: '0.4572082752744464-21'
}
[0-0] 2020-07-05T23:33:27.455Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-21")
[0-0] 2020-07-05T23:33:27.455Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-21/displayed
[0-0] 2020-07-05T23:33:27.677Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:33:27.678Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-07-05T23:33:27.678Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/execute/sync
[0-0] 2020-07-05T23:33:27.678Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-21',
      ELEMENT: '0.4572082752744464-21'
    }
  ]
}
[0-0] 2020-07-05T23:33:27.894Z INFO webdriver: RESULT true
[0-0] 2020-07-05T23:33:27.895Z INFO webdriver: COMMAND elementClick("0.4572082752744464-21")
[0-0] 2020-07-05T23:33:27.895Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-21/click
[3-0] 2020-07-05T23:33:29.352Z INFO webdriver: COMMAND findElement("css selector", "[id^=measureItemCompressedChoiceYes-]")
[3-0] 2020-07-05T23:33:29.353Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
[3-0] 2020-07-05T23:33:29.353Z INFO webdriver: DATA {
  using: 'css selector',
  value: '[id^=measureItemCompressedChoiceYes-]'
}
[3-0] 2020-07-05T23:33:29.595Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-16',
  ELEMENT: '0.04511222181228458-16'
}
[3-0] 2020-07-05T23:33:29.604Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-16")
[3-0] 2020-07-05T23:33:29.604Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-16/displayed
[3-0] 2020-07-05T23:33:29.853Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:33:29.854Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[3-0] 2020-07-05T23:33:29.854Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/execute/sync
[3-0] 2020-07-05T23:33:29.854Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-16',
      ELEMENT: '0.04511222181228458-16'
    }
  ]
}
[3-0] 2020-07-05T23:33:30.055Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:33:30.055Z INFO webdriver: COMMAND elementClick("0.04511222181228458-16")
[3-0] 2020-07-05T23:33:30.056Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-16/click
[1-0] 2020-07-05T23:33:30.326Z INFO webdriver: COMMAND findElement("css selector", "[id^=officeItemCompressedCandidateImageAndName-]")
[1-0] 2020-07-05T23:33:30.327Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:33:30.329Z INFO webdriver: DATA {
  using: 'css selector',
  value: '[id^=officeItemCompressedCandidateImageAndName-]'
}
[1-0] 2020-07-05T23:33:30.564Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-20',
  ELEMENT: '0.18933346895215597-20'
}
[1-0] 2020-07-05T23:33:30.571Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-20")
[1-0] 2020-07-05T23:33:30.571Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-20/displayed
[1-0] 2020-07-05T23:33:30.784Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:33:30.785Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[1-0] 2020-07-05T23:33:30.785Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/execute/sync
[1-0] 2020-07-05T23:33:30.785Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-20',
      ELEMENT: '0.18933346895215597-20'
    }
  ]
}
[1-0] 2020-07-05T23:33:30.991Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:33:30.992Z INFO webdriver: COMMAND elementClick("0.18933346895215597-20")
[1-0] 2020-07-05T23:33:30.992Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-20/click
[2-0] 2020-07-05T23:33:32.208Z INFO webdriver: COMMAND findElement("css selector", "#ballotBadgeDesktop-Federal")
[2-0] 2020-07-05T23:33:32.208Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[2-0] 2020-07-05T23:33:32.208Z INFO webdriver: DATA { using: 'css selector', value: '#ballotBadgeDesktop-Federal' }
[2-0] 2020-07-05T23:33:32.441Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-19',
  ELEMENT: '0.21810297461574035-19'
}
[2-0] 2020-07-05T23:33:32.447Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-19")
[2-0] 2020-07-05T23:33:32.447Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-19/displayed
[2-0] 2020-07-05T23:33:32.654Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:33:32.655Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[2-0] 2020-07-05T23:33:32.655Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/execute/sync
[2-0] 2020-07-05T23:33:32.655Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-19',
      ELEMENT: '0.21810297461574035-19'
    }
  ]
}
[2-0] 2020-07-05T23:33:32.846Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:33:32.846Z INFO webdriver: COMMAND elementClick("0.21810297461574035-19")
[2-0] 2020-07-05T23:33:32.847Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-19/click
[3-0] 2020-07-05T23:33:34.053Z INFO webdriver: COMMAND findElement("css selector", "#filterBaseFilters")
[3-0] 2020-07-05T23:33:34.054Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
[3-0] 2020-07-05T23:33:34.054Z INFO webdriver: DATA { using: 'css selector', value: '#filterBaseFilters' }
[1-0] 2020-07-05T23:33:34.681Z INFO webdriver: COMMAND findElement("css selector", "#backToLinkTabHeader")
[1-0] 2020-07-05T23:33:34.682Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:33:34.682Z INFO webdriver: DATA { using: 'css selector', value: '#backToLinkTabHeader' }
[3-0] 2020-07-05T23:33:34.691Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-17',
  ELEMENT: '0.04511222181228458-17'
}
[3-0] 2020-07-05T23:33:34.698Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-17")
[3-0] 2020-07-05T23:33:34.699Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-17/displayed
[3-0] 2020-07-05T23:33:34.971Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:33:34.971Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[3-0] 2020-07-05T23:33:34.972Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/execute/sync
[3-0] 2020-07-05T23:33:34.972Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-17',
      ELEMENT: '0.04511222181228458-17'
    }
  ]
}
[3-0] 2020-07-05T23:33:35.184Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:33:35.185Z INFO webdriver: COMMAND elementClick("0.04511222181228458-17")
[3-0] 2020-07-05T23:33:35.185Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-17/click
[1-0] 2020-07-05T23:33:35.714Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-21',
  ELEMENT: '0.18933346895215597-21'
}
[1-0] 2020-07-05T23:33:35.719Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-21")
[1-0] 2020-07-05T23:33:35.720Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-21/displayed
[2-0] 2020-07-05T23:33:35.819Z INFO webdriver: COMMAND findElement("css selector", "[id^=officeItemCompressedCandidateImageAndName-]")
[2-0] 2020-07-05T23:33:35.819Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[2-0] 2020-07-05T23:33:35.820Z INFO webdriver: DATA {
  using: 'css selector',
  value: '[id^=officeItemCompressedCandidateImageAndName-]'
}
[1-0] 2020-07-05T23:33:35.985Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:33:35.985Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[1-0] 2020-07-05T23:33:35.986Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/execute/sync
[1-0] 2020-07-05T23:33:35.986Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-21',
      ELEMENT: '0.18933346895215597-21'
    }
  ]
}
[2-0] 2020-07-05T23:33:36.036Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-20',
  ELEMENT: '0.21810297461574035-20'
}
[2-0] 2020-07-05T23:33:36.042Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-20")
[2-0] 2020-07-05T23:33:36.042Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-20/displayed
[1-0] 2020-07-05T23:33:36.196Z INFO webdriver: RESULT true
[1-0] 2020-07-05T23:33:36.197Z INFO webdriver: COMMAND elementClick("0.18933346895215597-21")
[1-0] 2020-07-05T23:33:36.197Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-21/click
[2-0] 2020-07-05T23:33:36.261Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:33:36.264Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[2-0] 2020-07-05T23:33:36.264Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/execute/sync
[2-0] 2020-07-05T23:33:36.265Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-20',
      ELEMENT: '0.21810297461574035-20'
    }
  ]
}
[2-0] 2020-07-05T23:33:36.488Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:33:36.489Z INFO webdriver: COMMAND elementClick("0.21810297461574035-20")
[2-0] 2020-07-05T23:33:36.489Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-20/click
[0-0] 2020-07-05T23:33:37.041Z INFO webdriver: COMMAND findElement("css selector", "#valuesTabHeaderBar")
2020-07-05T23:33:37.042Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
2020-07-05T23:33:37.042Z INFO webdriver: DATA { using: 'css selector', value: '#valuesTabHeaderBar' }
[0-0] 2020-07-05T23:33:37.316Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-22',
  ELEMENT: '0.4572082752744464-22'
}
[0-0] 2020-07-05T23:33:37.323Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-22")
[0-0] 2020-07-05T23:33:37.323Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-22/displayed
[0-0] 2020-07-05T23:33:37.553Z INFO webdriver: RESULT false
[0-0] 2020-07-05T23:33:37.825Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-22")
[0-0] 2020-07-05T23:33:37.825Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-22/displayed
[0-0] 2020-07-05T23:33:38.026Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:33:38.180Z INFO webdriver: COMMAND findElement("css selector", "#filterBaseFilters")
[3-0] 2020-07-05T23:33:38.180Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
[3-0] 2020-07-05T23:33:38.180Z INFO webdriver: DATA { using: 'css selector', value: '#filterBaseFilters' }
[0-0] 2020-07-05T23:33:38.324Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-22")
[0-0] 2020-07-05T23:33:38.324Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-22/displayed
[3-0] 2020-07-05T23:33:38.392Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-17',
  ELEMENT: '0.04511222181228458-17'
}
[3-0] 2020-07-05T23:33:38.400Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-17")
[3-0] 2020-07-05T23:33:38.400Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-17/displayed
[0-0] 2020-07-05T23:33:38.536Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:33:38.633Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:33:38.634Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[3-0] 2020-07-05T23:33:38.634Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/execute/sync
[3-0] 2020-07-05T23:33:38.634Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-17',
      ELEMENT: '0.04511222181228458-17'
    }
  ]
}
[0-0] 2020-07-05T23:33:38.823Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-22")
[0-0] 2020-07-05T23:33:38.823Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-22/displayed
[3-0] 2020-07-05T23:33:38.828Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:33:38.828Z INFO webdriver: COMMAND elementClick("0.04511222181228458-17")
[3-0] 2020-07-05T23:33:38.829Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-17/click
[0-0] 2020-07-05T23:33:39.022Z INFO webdriver: RESULT false
[0-0] 2020-07-05T23:33:39.324Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-22")
[0-0] 2020-07-05T23:33:39.325Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-22/displayed
[0-0] 2020-07-05T23:33:39.513Z INFO webdriver: RESULT false
[0-0] 2020-07-05T23:33:39.824Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-22")
[0-0] 2020-07-05T23:33:39.824Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-22/displayed
[2-0] 2020-07-05T23:33:39.936Z INFO webdriver: COMMAND findElement("css selector", "#backToLinkTabHeader")
[2-0] 2020-07-05T23:33:39.936Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[2-0] 2020-07-05T23:33:39.936Z INFO webdriver: DATA { using: 'css selector', value: '#backToLinkTabHeader' }
[0-0] 2020-07-05T23:33:40.297Z INFO webdriver: RESULT false
[0-0] 2020-07-05T23:33:40.324Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-22")
[0-0] 2020-07-05T23:33:40.326Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-22/displayed
[2-0] 2020-07-05T23:33:40.467Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-21',
  ELEMENT: '0.21810297461574035-21'
}
[2-0] 2020-07-05T23:33:40.476Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-21")
[2-0] 2020-07-05T23:33:40.477Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-21/displayed
[0-0] 2020-07-05T23:33:40.533Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:33:40.677Z INFO webdriver: RESULT true
2020-07-05T23:33:40.678Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
2020-07-05T23:33:40.678Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/execute/sync
[2-0] 2020-07-05T23:33:40.679Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-21',
      ELEMENT: '0.21810297461574035-21'
    }
  ]
}
[0-0] 2020-07-05T23:33:40.824Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-22")
[0-0] 2020-07-05T23:33:40.824Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-22/displayed
[2-0] 2020-07-05T23:33:40.904Z INFO webdriver: RESULT true
[2-0] 2020-07-05T23:33:40.904Z INFO webdriver: COMMAND elementClick("0.21810297461574035-21")
[2-0] 2020-07-05T23:33:40.904Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-21/click
[0-0] 2020-07-05T23:33:41.020Z INFO webdriver: RESULT false
[0-0] 2020-07-05T23:33:41.324Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-22")
2020-07-05T23:33:41.324Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-22/displayed
[0-0] 2020-07-05T23:33:41.530Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:33:41.759Z INFO webdriver: COMMAND findElement("css selector", "#backToLinkTabHeader")
2020-07-05T23:33:41.759Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
2020-07-05T23:33:41.759Z INFO webdriver: DATA { using: 'css selector', value: '#backToLinkTabHeader' }
[0-0] 2020-07-05T23:33:41.824Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-22")
[0-0] 2020-07-05T23:33:41.824Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-22/displayed
[3-0] 2020-07-05T23:33:41.974Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-18',
  ELEMENT: '0.04511222181228458-18'
}
[3-0] 2020-07-05T23:33:41.977Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-18")
[3-0] 2020-07-05T23:33:41.978Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-18/displayed
[0-0] 2020-07-05T23:33:42.063Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:33:42.204Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:33:42.205Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[3-0] 2020-07-05T23:33:42.205Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/execute/sync
[3-0] 2020-07-05T23:33:42.205Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-18',
      ELEMENT: '0.04511222181228458-18'
    }
  ]
}
[0-0] Error in "Cross browser automated testing should go to the values tab"
waitUntil condition timed out after 5000ms
[0-0] 2020-07-05T23:33:42.324Z INFO webdriver: COMMAND findElement("css selector", "#friendsTabHeaderBar")
2020-07-05T23:33:42.325Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
2020-07-05T23:33:42.325Z INFO webdriver: DATA { using: 'css selector', value: '#friendsTabHeaderBar' }
[3-0] 2020-07-05T23:33:42.403Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:33:42.404Z INFO webdriver: COMMAND elementClick("0.04511222181228458-18")
[3-0] 2020-07-05T23:33:42.404Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-18/click
[0-0] 2020-07-05T23:33:42.538Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-23',
  ELEMENT: '0.4572082752744464-23'
}
[0-0] 2020-07-05T23:33:42.540Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-23")
[0-0] 2020-07-05T23:33:42.540Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-23/displayed
[0-0] 2020-07-05T23:33:42.753Z INFO webdriver: RESULT false
[0-0] 2020-07-05T23:33:43.041Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-23")
[0-0] 2020-07-05T23:33:43.041Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-23/displayed
[0-0] 2020-07-05T23:33:43.350Z INFO webdriver: RESULT false
[0-0] 2020-07-05T23:33:43.541Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-23")
[0-0] 2020-07-05T23:33:43.541Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-23/displayed
[0-0] 2020-07-05T23:33:43.753Z INFO webdriver: RESULT false
[0-0] 2020-07-05T23:33:44.041Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-23")
[0-0] 2020-07-05T23:33:44.041Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-23/displayed
[0-0] 2020-07-05T23:33:44.242Z INFO webdriver: RESULT false
[0-0] 2020-07-05T23:33:44.540Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-23")
[0-0] 2020-07-05T23:33:44.541Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-23/displayed
[0-0] 2020-07-05T23:33:44.730Z INFO webdriver: RESULT false
[0-0] 2020-07-05T23:33:45.040Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-23")
2020-07-05T23:33:45.041Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-23/displayed
[0-0] 2020-07-05T23:33:45.274Z INFO webdriver: RESULT false
[0-0] 2020-07-05T23:33:45.540Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-23")
[0-0] 2020-07-05T23:33:45.541Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-23/displayed
[1-0] 2020-07-05T23:33:45.627Z INFO webdriver: COMMAND findElement("css selector", "#valuesTabHeaderBar")
[1-0] 2020-07-05T23:33:45.627Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:33:45.627Z INFO webdriver: DATA { using: 'css selector', value: '#valuesTabHeaderBar' }
[0-0] 2020-07-05T23:33:45.751Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:45.884Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-22',
  ELEMENT: '0.18933346895215597-22'
}
2020-07-05T23:33:45.887Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-22")
2020-07-05T23:33:45.887Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-22/displayed
[0-0] 2020-07-05T23:33:46.041Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-23")
[0-0] 2020-07-05T23:33:46.041Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-23/displayed
[1-0] 2020-07-05T23:33:46.121Z INFO webdriver: RESULT false
[0-0] 2020-07-05T23:33:46.252Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:46.388Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-22")
[1-0] 2020-07-05T23:33:46.388Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-22/displayed
[0-0] 2020-07-05T23:33:46.540Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-23")
[0-0] 2020-07-05T23:33:46.540Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-23/displayed
[1-0] 2020-07-05T23:33:46.588Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:46.887Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-22")
[1-0] 2020-07-05T23:33:46.887Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-22/displayed
[0-0] 2020-07-05T23:33:47.043Z INFO webdriver: RESULT false
[0-0] 2020-07-05T23:33:47.045Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-23")
[0-0] 2020-07-05T23:33:47.045Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-23/displayed
[1-0] 2020-07-05T23:33:47.079Z INFO webdriver: RESULT false
[0-0] 2020-07-05T23:33:47.237Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:47.387Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-22")
[1-0] 2020-07-05T23:33:47.387Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-22/displayed
[0-0] Error in "Cross browser automated testing should go to the friends tab"
waitUntil condition timed out after 5000ms
[0-0] 2020-07-05T23:33:47.542Z INFO webdriver: COMMAND findElement("css selector", "#readyTabHeaderBar")
[0-0] 2020-07-05T23:33:47.542Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
[0-0] 2020-07-05T23:33:47.542Z INFO webdriver: DATA { using: 'css selector', value: '#readyTabHeaderBar' }
[1-0] 2020-07-05T23:33:47.636Z INFO webdriver: RESULT false
[0-0] 2020-07-05T23:33:47.752Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-24',
  ELEMENT: '0.4572082752744464-24'
}
[0-0] 2020-07-05T23:33:47.754Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-24")
[0-0] 2020-07-05T23:33:47.754Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-24/displayed
[1-0] 2020-07-05T23:33:47.887Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-22")
[1-0] 2020-07-05T23:33:47.888Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-22/displayed
[0-0] 2020-07-05T23:33:47.965Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:48.092Z INFO webdriver: RESULT false
[0-0] 2020-07-05T23:33:48.255Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-24")
[0-0] 2020-07-05T23:33:48.255Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-24/displayed
[1-0] 2020-07-05T23:33:48.387Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-22")
[1-0] 2020-07-05T23:33:48.387Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-22/displayed
[0-0] 2020-07-05T23:33:48.452Z INFO webdriver: RESULT false
[0-0] 2020-07-05T23:33:48.755Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-24")
[0-0] 2020-07-05T23:33:48.755Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-24/displayed
[1-0] 2020-07-05T23:33:48.880Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:48.888Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-22")
[1-0] 2020-07-05T23:33:48.888Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-22/displayed
[0-0] 2020-07-05T23:33:48.978Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:49.101Z INFO webdriver: RESULT false
[0-0] 2020-07-05T23:33:49.254Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-24")
2020-07-05T23:33:49.254Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-24/displayed
[1-0] 2020-07-05T23:33:49.388Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-22")
[1-0] 2020-07-05T23:33:49.388Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-22/displayed
[0-0] 2020-07-05T23:33:49.456Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:49.605Z INFO webdriver: RESULT false
[0-0] 2020-07-05T23:33:49.755Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-24")
[0-0] 2020-07-05T23:33:49.755Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-24/displayed
[1-0] 2020-07-05T23:33:49.888Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-22")
[1-0] 2020-07-05T23:33:49.888Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-22/displayed
[0-0] 2020-07-05T23:33:49.959Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:50.081Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:33:50.143Z INFO webdriver: COMMAND findElement("css selector", "#valuesTabHeaderBar")
[2-0] 2020-07-05T23:33:50.144Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[2-0] 2020-07-05T23:33:50.144Z INFO webdriver: DATA { using: 'css selector', value: '#valuesTabHeaderBar' }
[0-0] 2020-07-05T23:33:50.254Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-24")
2020-07-05T23:33:50.255Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-24/displayed
[2-0] 2020-07-05T23:33:50.385Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-22',
  ELEMENT: '0.21810297461574035-22'
}
[1-0] 2020-07-05T23:33:50.388Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-22")
2020-07-05T23:33:50.388Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-22/displayed
[2-0] 2020-07-05T23:33:50.390Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-22")
2020-07-05T23:33:50.390Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-22/displayed
[0-0] 2020-07-05T23:33:50.464Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:50.593Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:33:50.624Z INFO webdriver: RESULT false
[0-0] 2020-07-05T23:33:50.754Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-24")
[0-0] 2020-07-05T23:33:50.754Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-24/displayed
[1-0] Error in "Cross browser automated testing should go to the values tab"
waitUntil condition timed out after 5000ms
[2-0] 2020-07-05T23:33:50.889Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-22")
2020-07-05T23:33:50.889Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-22/displayed
[1-0] 2020-07-05T23:33:50.890Z INFO webdriver: COMMAND findElement("css selector", "#friendsTabHeaderBar")
[1-0] 2020-07-05T23:33:50.891Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:33:50.891Z INFO webdriver: DATA { using: 'css selector', value: '#friendsTabHeaderBar' }
[0-0] 2020-07-05T23:33:50.955Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:33:51.086Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:51.152Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-23',
  ELEMENT: '0.18933346895215597-23'
}
[1-0] 2020-07-05T23:33:51.158Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-23")
[1-0] 2020-07-05T23:33:51.158Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-23/displayed
[0-0] 2020-07-05T23:33:51.254Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-24")
[0-0] 2020-07-05T23:33:51.255Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-24/displayed
[1-0] 2020-07-05T23:33:51.388Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:33:51.390Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-22")
[2-0] 2020-07-05T23:33:51.391Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-22/displayed
[0-0] 2020-07-05T23:33:51.453Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:33:51.593Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:51.658Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-23")
[1-0] 2020-07-05T23:33:51.659Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-23/displayed
[0-0] 2020-07-05T23:33:51.755Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-24")
[0-0] 2020-07-05T23:33:51.756Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-24/displayed
[1-0] 2020-07-05T23:33:51.852Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:33:51.890Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-22")
[2-0] 2020-07-05T23:33:51.891Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-22/displayed
[0-0] 2020-07-05T23:33:51.949Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:33:52.114Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:52.158Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-23")
[1-0] 2020-07-05T23:33:52.159Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-23/displayed
[0-0] 2020-07-05T23:33:52.255Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-24")
[0-0] 2020-07-05T23:33:52.255Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-24/displayed
[1-0] 2020-07-05T23:33:52.361Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:33:52.390Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-22")
[2-0] 2020-07-05T23:33:52.391Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-22/displayed
[0-0] 2020-07-05T23:33:52.458Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:33:52.591Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:52.657Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-23")
[1-0] 2020-07-05T23:33:52.658Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-23/displayed
[0-0] Error in "Cross browser automated testing should go to the ready tab"
waitUntil condition timed out after 5000ms
[0-0] 2020-07-05T23:33:52.756Z INFO webdriver: COMMAND findElement("css selector", "#ballotTabHeaderBar")
[0-0] 2020-07-05T23:33:52.757Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element
2020-07-05T23:33:52.757Z INFO webdriver: DATA { using: 'css selector', value: '#ballotTabHeaderBar' }
[1-0] 2020-07-05T23:33:52.881Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:33:52.889Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-22")
2020-07-05T23:33:52.890Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-22/displayed
[0-0] 2020-07-05T23:33:52.974Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.4572082752744464-25',
  ELEMENT: '0.4572082752744464-25'
}
[0-0] 2020-07-05T23:33:52.985Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-25")
[0-0] 2020-07-05T23:33:52.986Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-25/displayed
[3-0] 2020-07-05T23:33:53.071Z INFO webdriver: COMMAND findElement("css selector", "#ballotBadgeDesktop-Federal")
[3-0] 2020-07-05T23:33:53.071Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
[3-0] 2020-07-05T23:33:53.071Z INFO webdriver: DATA { using: 'css selector', value: '#ballotBadgeDesktop-Federal' }
[1-0] 2020-07-05T23:33:53.158Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-23")
[1-0] 2020-07-05T23:33:53.158Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-23/displayed
[0-0] 2020-07-05T23:33:53.230Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:33:53.293Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-19',
  ELEMENT: '0.04511222181228458-19'
}
[3-0] 2020-07-05T23:33:53.297Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-19")
[3-0] 2020-07-05T23:33:53.297Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-19/displayed
[2-0] 2020-07-05T23:33:53.344Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:53.351Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:33:53.389Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-22")
[2-0] 2020-07-05T23:33:53.389Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-22/displayed
[0-0] 2020-07-05T23:33:53.485Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-25")
2020-07-05T23:33:53.486Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-25/displayed
[3-0] 2020-07-05T23:33:53.554Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:33:53.554Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[3-0] 2020-07-05T23:33:53.554Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/execute/sync
[3-0] 2020-07-05T23:33:53.555Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-19',
      ELEMENT: '0.04511222181228458-19'
    }
  ]
}
[2-0] 2020-07-05T23:33:53.582Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:53.658Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-23")
[1-0] 2020-07-05T23:33:53.658Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-23/displayed
[0-0] 2020-07-05T23:33:53.685Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:33:53.777Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:33:53.778Z INFO webdriver: COMMAND elementClick("0.04511222181228458-19")
[3-0] 2020-07-05T23:33:53.778Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-19/click
[1-0] 2020-07-05T23:33:53.863Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:33:53.889Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-22")
[2-0] 2020-07-05T23:33:53.889Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-22/displayed
[0-0] 2020-07-05T23:33:53.986Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-25")
[0-0] 2020-07-05T23:33:53.986Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-25/displayed
[2-0] 2020-07-05T23:33:54.087Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:54.158Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-23")
[1-0] 2020-07-05T23:33:54.158Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-23/displayed
[0-0] 2020-07-05T23:33:54.195Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:54.364Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:33:54.390Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-22")
[2-0] 2020-07-05T23:33:54.390Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-22/displayed
[0-0] 2020-07-05T23:33:54.485Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-25")
[0-0] 2020-07-05T23:33:54.486Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-25/displayed
[2-0] 2020-07-05T23:33:54.596Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:54.657Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-23")
[1-0] 2020-07-05T23:33:54.657Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-23/displayed
[0-0] 2020-07-05T23:33:54.705Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:54.868Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:33:54.890Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-22")
[2-0] 2020-07-05T23:33:54.891Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-22/displayed
[0-0] 2020-07-05T23:33:54.987Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-25")
[0-0] 2020-07-05T23:33:54.987Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-25/displayed
[2-0] 2020-07-05T23:33:55.117Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:55.158Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-23")
[1-0] 2020-07-05T23:33:55.158Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-23/displayed
[0-0] 2020-07-05T23:33:55.190Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:55.376Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:33:55.390Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-22")
[2-0] 2020-07-05T23:33:55.391Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-22/displayed
[2-0] Error in "Cross browser automated testing should go to the values tab"
waitUntil condition timed out after 5000ms
[2-0] 2020-07-05T23:33:55.397Z INFO webdriver: COMMAND findElement("css selector", "#friendsTabHeaderBar")
[2-0] 2020-07-05T23:33:55.397Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[2-0] 2020-07-05T23:33:55.397Z INFO webdriver: DATA { using: 'css selector', value: '#friendsTabHeaderBar' }
[0-0] 2020-07-05T23:33:55.485Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-25")
[0-0] 2020-07-05T23:33:55.486Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-25/displayed
[2-0] 2020-07-05T23:33:55.593Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:55.657Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-23")
[1-0] 2020-07-05T23:33:55.658Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-23/displayed
[0-0] 2020-07-05T23:33:55.685Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:33:55.850Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-23',
  ELEMENT: '0.21810297461574035-23'
}
[2-0] 2020-07-05T23:33:55.857Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-23")
[2-0] 2020-07-05T23:33:55.857Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-23/displayed
[1-0] 2020-07-05T23:33:55.857Z INFO webdriver: RESULT false
[0-0] 2020-07-05T23:33:55.986Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-25")
[0-0] 2020-07-05T23:33:55.987Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-25/displayed
[2-0] 2020-07-05T23:33:56.084Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:56.158Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-23")
[1-0] 2020-07-05T23:33:56.159Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-23/displayed
[1-0] Error in "Cross browser automated testing should go to the friends tab"
waitUntil condition timed out after 5000ms
[1-0] 2020-07-05T23:33:56.163Z INFO webdriver: COMMAND findElement("css selector", "#readyTabHeaderBar")
[1-0] 2020-07-05T23:33:56.163Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:33:56.164Z INFO webdriver: DATA { using: 'css selector', value: '#readyTabHeaderBar' }
[0-0] 2020-07-05T23:33:56.205Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:33:56.357Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-23")
[2-0] 2020-07-05T23:33:56.358Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-23/displayed
[1-0] 2020-07-05T23:33:56.396Z INFO webdriver: RESULT false
[0-0] 2020-07-05T23:33:56.486Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-25")
[0-0] 2020-07-05T23:33:56.486Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-25/displayed
[2-0] 2020-07-05T23:33:56.545Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:56.644Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-24',
  ELEMENT: '0.18933346895215597-24'
}
[1-0] 2020-07-05T23:33:56.646Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-24")
[1-0] 2020-07-05T23:33:56.646Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-24/displayed
[0-0] 2020-07-05T23:33:56.680Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:33:56.857Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-23")
[2-0] 2020-07-05T23:33:56.857Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-23/displayed
[3-0] 2020-07-05T23:33:56.858Z INFO webdriver: COMMAND findElement("css selector", "[id^=officeItemCompressedCandidateImageAndName-]")
[3-0] 2020-07-05T23:33:56.859Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
[3-0] 2020-07-05T23:33:56.859Z INFO webdriver: DATA {
  using: 'css selector',
  value: '[id^=officeItemCompressedCandidateImageAndName-]'
}
[1-0] 2020-07-05T23:33:56.878Z INFO webdriver: RESULT false
[0-0] 2020-07-05T23:33:56.985Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-25")
[0-0] 2020-07-05T23:33:56.986Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-25/displayed
[2-0] 2020-07-05T23:33:57.069Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:33:57.079Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-20',
  ELEMENT: '0.04511222181228458-20'
}
[3-0] 2020-07-05T23:33:57.087Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-20")
[3-0] 2020-07-05T23:33:57.087Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-20/displayed
[1-0] 2020-07-05T23:33:57.147Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-24")
[1-0] 2020-07-05T23:33:57.148Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-24/displayed
[0-0] 2020-07-05T23:33:57.183Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:33:57.308Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:33:57.309Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[3-0] 2020-07-05T23:33:57.309Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/execute/sync
[3-0] 2020-07-05T23:33:57.309Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-20',
      ELEMENT: '0.04511222181228458-20'
    }
  ]
}
[2-0] 2020-07-05T23:33:57.356Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-23")
[2-0] 2020-07-05T23:33:57.357Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-23/displayed
[1-0] 2020-07-05T23:33:57.368Z INFO webdriver: RESULT false
[0-0] 2020-07-05T23:33:57.485Z INFO webdriver: COMMAND isElementDisplayed("0.4572082752744464-25")
[0-0] 2020-07-05T23:33:57.486Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/eaddda78677dd9ce6352ad27a2c66ab18d1dbb45/element/0.4572082752744464-25/displayed
[3-0] 2020-07-05T23:33:57.542Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:33:57.542Z INFO webdriver: COMMAND elementClick("0.04511222181228458-20")
[3-0] 2020-07-05T23:33:57.543Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-20/click
[2-0] 2020-07-05T23:33:57.547Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:57.647Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-24")
[1-0] 2020-07-05T23:33:57.647Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-24/displayed
[0-0] 2020-07-05T23:33:57.677Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:33:57.856Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-23")
[2-0] 2020-07-05T23:33:57.857Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-23/displayed
[1-0] 2020-07-05T23:33:57.875Z INFO webdriver: RESULT false
[0-0] Error in "Cross browser automated testing should go back to the ballot tab"
waitUntil condition timed out after 5000ms
[0-0] FAILED in Android - /specs/ballotMainTest.js
[2-0] 2020-07-05T23:33:58.072Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:58.146Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-24")
[1-0] 2020-07-05T23:33:58.147Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-24/displayed
[2-0] 2020-07-05T23:33:58.357Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-23")
[2-0] 2020-07-05T23:33:58.357Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-23/displayed
[1-0] 2020-07-05T23:33:58.359Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:33:58.545Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:58.647Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-24")
[1-0] 2020-07-05T23:33:58.647Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-24/displayed
[2-0] 2020-07-05T23:33:58.856Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-23")
[2-0] 2020-07-05T23:33:58.857Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-23/displayed
[1-0] 2020-07-05T23:33:58.859Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:33:59.049Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:59.147Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-24")
[1-0] 2020-07-05T23:33:59.147Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-24/displayed
[2-0] 2020-07-05T23:33:59.356Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-23")
[2-0] 2020-07-05T23:33:59.356Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-23/displayed
[1-0] 2020-07-05T23:33:59.360Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:33:59.550Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:33:59.646Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-24")
[1-0] 2020-07-05T23:33:59.647Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-24/displayed
[2-0] 2020-07-05T23:33:59.857Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-23")
[2-0] 2020-07-05T23:33:59.858Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-23/displayed
[1-0] 2020-07-05T23:33:59.869Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:34:00.082Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:34:00.147Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-24")
[1-0] 2020-07-05T23:34:00.148Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-24/displayed
[1-0] 2020-07-05T23:34:00.346Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:34:00.357Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-23")
[2-0] 2020-07-05T23:34:00.357Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-23/displayed
[2-0] 2020-07-05T23:34:00.560Z INFO webdriver: RESULT false
[2-0] Error in "Cross browser automated testing should go to the friends tab"
waitUntil condition timed out after 5000ms
[2-0] 2020-07-05T23:34:00.563Z INFO webdriver: COMMAND findElement("css selector", "#readyTabHeaderBar")
[2-0] 2020-07-05T23:34:00.563Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[2-0] 2020-07-05T23:34:00.563Z INFO webdriver: DATA { using: 'css selector', value: '#readyTabHeaderBar' }
[1-0] 2020-07-05T23:34:00.647Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-24")
[1-0] 2020-07-05T23:34:00.648Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-24/displayed
[2-0] 2020-07-05T23:34:00.782Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-24',
  ELEMENT: '0.21810297461574035-24'
}
[2-0] 2020-07-05T23:34:00.790Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-24")
[2-0] 2020-07-05T23:34:00.790Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-24/displayed
[1-0] 2020-07-05T23:34:00.858Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:34:00.997Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:34:01.146Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-24")
[1-0] 2020-07-05T23:34:01.146Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-24/displayed
[2-0] 2020-07-05T23:34:01.290Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-24")
2020-07-05T23:34:01.291Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-24/displayed
[1-0] 2020-07-05T23:34:01.358Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:34:01.480Z INFO webdriver: RESULT false
[1-0] Error in "Cross browser automated testing should go to the ready tab"
waitUntil condition timed out after 5000ms
[1-0] 2020-07-05T23:34:01.648Z INFO webdriver: COMMAND findElement("css selector", "#ballotTabHeaderBar")
[1-0] 2020-07-05T23:34:01.649Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element
[1-0] 2020-07-05T23:34:01.649Z INFO webdriver: DATA { using: 'css selector', value: '#ballotTabHeaderBar' }
[3-0] 2020-07-05T23:34:01.771Z INFO webdriver: COMMAND findElement("css selector", "#backToLinkTabHeader")
[3-0] 2020-07-05T23:34:01.771Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
[3-0] 2020-07-05T23:34:01.771Z INFO webdriver: DATA { using: 'css selector', value: '#backToLinkTabHeader' }
[2-0] 2020-07-05T23:34:01.791Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-24")
[2-0] 2020-07-05T23:34:01.791Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-24/displayed
[1-0] 2020-07-05T23:34:01.870Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.18933346895215597-25',
  ELEMENT: '0.18933346895215597-25'
}
[1-0] 2020-07-05T23:34:01.879Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-25")
[1-0] 2020-07-05T23:34:01.879Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-25/displayed
[2-0] 2020-07-05T23:34:01.988Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:34:02.081Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:34:02.291Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-24")
[2-0] 2020-07-05T23:34:02.291Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-24/displayed
[1-0] 2020-07-05T23:34:02.379Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-25")
[1-0] 2020-07-05T23:34:02.379Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-25/displayed
[2-0] 2020-07-05T23:34:02.568Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:34:02.726Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:34:02.790Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-24")
[2-0] 2020-07-05T23:34:02.790Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-24/displayed
[1-0] 2020-07-05T23:34:02.878Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-25")
2020-07-05T23:34:02.879Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-25/displayed
[2-0] 2020-07-05T23:34:03.107Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:34:03.128Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:34:03.291Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-24")
[2-0] 2020-07-05T23:34:03.291Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-24/displayed
[1-0] 2020-07-05T23:34:03.379Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-25")
[1-0] 2020-07-05T23:34:03.380Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-25/displayed
[2-0] 2020-07-05T23:34:03.510Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:34:03.575Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:34:03.791Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-24")
[2-0] 2020-07-05T23:34:03.791Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-24/displayed
[1-0] 2020-07-05T23:34:03.880Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-25")
[1-0] 2020-07-05T23:34:03.880Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-25/displayed
[2-0] 2020-07-05T23:34:04.013Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:34:04.126Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:34:04.291Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-24")
[2-0] 2020-07-05T23:34:04.291Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-24/displayed
[1-0] 2020-07-05T23:34:04.379Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-25")
[1-0] 2020-07-05T23:34:04.379Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-25/displayed
[2-0] 2020-07-05T23:34:04.478Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:34:04.589Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:34:04.791Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-24")
[2-0] 2020-07-05T23:34:04.792Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-24/displayed
[1-0] 2020-07-05T23:34:04.879Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-25")
[1-0] 2020-07-05T23:34:04.880Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-25/displayed
[2-0] 2020-07-05T23:34:04.986Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:34:05.091Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:05.107Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-21',
  ELEMENT: '0.04511222181228458-21'
}
[3-0] 2020-07-05T23:34:05.112Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-21")
2020-07-05T23:34:05.113Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-21/displayed
[2-0] 2020-07-05T23:34:05.291Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-24")
[2-0] 2020-07-05T23:34:05.292Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-24/displayed
[1-0] 2020-07-05T23:34:05.379Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-25")
[1-0] 2020-07-05T23:34:05.380Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-25/displayed
[2-0] 2020-07-05T23:34:05.482Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:34:05.682Z INFO webdriver: RESULT false
[2-0] Error in "Cross browser automated testing should go to the ready tab"
waitUntil condition timed out after 5000ms
[2-0] 2020-07-05T23:34:05.792Z INFO webdriver: COMMAND findElement("css selector", "#ballotTabHeaderBar")
[2-0] 2020-07-05T23:34:05.793Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element
[2-0] 2020-07-05T23:34:05.793Z INFO webdriver: DATA { using: 'css selector', value: '#ballotTabHeaderBar' }
[1-0] 2020-07-05T23:34:05.879Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-25")
[1-0] 2020-07-05T23:34:05.879Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-25/displayed
[2-0] 2020-07-05T23:34:06.016Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.21810297461574035-25',
  ELEMENT: '0.21810297461574035-25'
}
[2-0] 2020-07-05T23:34:06.022Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-25")
[2-0] 2020-07-05T23:34:06.022Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-25/displayed
[1-0] 2020-07-05T23:34:06.093Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:06.108Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:34:06.109Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[3-0] 2020-07-05T23:34:06.109Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/execute/sync
[3-0] 2020-07-05T23:34:06.109Z INFO webdriver: DATA {
  script: 'return (function isElementClickable(elem) {\n' +
    '  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  const isOldEdge = !!window.StyleMedia;\n' +
    '  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n' +
    '\n' +
    '  function getOverlappingElement(elem, context = document) {\n' +
    '    const elemDimension = elem.getBoundingClientRect();\n' +
    '    const x = elemDimension.left + elem.clientWidth / 2;\n' +
    '    const y = elemDimension.top + elem.clientHeight / 2;\n' +
    '    return context.elementFromPoint(x, y);\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingRects(elem, context = document) {\n' +
    '    const elems = [];\n' +
    '    const rects = elem.getClientRects();\n' +
    '    const rect = rects[0];\n' +
    '    const x = rect.left + rect.width / 2;\n' +
    '    const y = rect.top + rect.height / 2;\n' +
    '    elems.push(context.elementFromPoint(x, y));\n' +
    '    return elems;\n' +
    '  }\n' +
    '\n' +
    '  function getOverlappingElements(elem, context) {\n' +
    '    return [getOverlappingElement(elem, context), ...getOverlappingRects(elem, context)];\n' +
    '  }\n' +
    '\n' +
    '  function nodeContains(elem, otherNode) {\n' +
    '    if (isOldEdge) {\n' +
    '      let tmpElement = otherNode;\n' +
    '\n' +
    '      while (tmpElement) {\n' +
    '        if (tmpElement === elem) {\n' +
    '          return true;\n' +
    '        }\n' +
    '\n' +
    '        tmpElement = tmpElement.parentNode;\n' +
    '\n' +
    '        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n' +
    '          tmpElement = tmpElement.host;\n' +
    '        }\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return elem.contains(otherNode);\n' +
    '  }\n' +
    '\n' +
    '  function isOverlappingElementMatch(elementsFromPoint, elem) {\n' +
    '    if (elementsFromPoint.some(elementFromPoint => elementFromPoint === elem || nodeContains(elem, elementFromPoint))) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    let elemsWithShadowRoot = [...new Set(elementsFromPoint)];\n' +
    '    elemsWithShadowRoot = elemsWithShadowRoot.filter(x => x && x.shadowRoot && x.shadowRoot.elementFromPoint);\n' +
    '    let shadowElementsFromPoint = [];\n' +
    '\n' +
    '    for (let shadowElement of elemsWithShadowRoot) {\n' +
    '      shadowElementsFromPoint.push(...getOverlappingElements(elem, shadowElement.shadowRoot));\n' +
    '    }\n' +
    '\n' +
    '    shadowElementsFromPoint = [...new Set(shadowElementsFromPoint)];\n' +
    '    shadowElementsFromPoint = shadowElementsFromPoint.filter(x => !elementsFromPoint.includes(x));\n' +
    '\n' +
    '    if (shadowElementsFromPoint.length === 0) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n' +
    '  }\n' +
    '\n' +
    '  function isElementInViewport(elem) {\n' +
    '    if (!elem.getBoundingClientRect) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    const rect = elem.getBoundingClientRect();\n' +
    '    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n' +
    '    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n' +
    '    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n' +
    '    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n' +
    '    return vertInView && horInView;\n' +
    '  }\n' +
    '\n' +
    '  function isClickable(elem) {\n' +
    '    return isElementInViewport(elem) && elem.disabled !== true && isOverlappingElementMatch(getOverlappingElements(elem), elem);\n' +
    '  }\n' +
    '\n' +
    '  if (!isClickable(elem)) {\n' +
    '    elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "      block: 'nearest',\n" +
    "      inline: 'nearest'\n" +
    '    } : false);\n' +
    '\n' +
    '    if (!isClickable(elem)) {\n' +
    '      elem.scrollIntoView(scrollIntoViewFullSupport ? {\n' +
    "        block: 'center',\n" +
    "        inline: 'center'\n" +
    '      } : true);\n' +
    '      return isClickable(elem);\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-21',
      ELEMENT: '0.04511222181228458-21'
    }
  ]
}
[2-0] 2020-07-05T23:34:06.229Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:34:06.379Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-25")
[1-0] 2020-07-05T23:34:06.380Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-25/displayed
[3-0] 2020-07-05T23:34:06.384Z INFO webdriver: RESULT true
[3-0] 2020-07-05T23:34:06.384Z INFO webdriver: COMMAND elementClick("0.04511222181228458-21")
[3-0] 2020-07-05T23:34:06.387Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-21/click
[2-0] 2020-07-05T23:34:06.522Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-25")
[2-0] 2020-07-05T23:34:06.522Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-25/displayed
[1-0] 2020-07-05T23:34:06.590Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:34:06.725Z INFO webdriver: RESULT false
[1-0] 2020-07-05T23:34:06.879Z INFO webdriver: COMMAND isElementDisplayed("0.18933346895215597-25")
[1-0] 2020-07-05T23:34:06.879Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/500cdae0ead6d892f67d6b0ad32e851070209b0c/element/0.18933346895215597-25/displayed
[1-0] Error in "Cross browser automated testing should go back to the ballot tab"
waitUntil condition timed out after 5000ms
[1-0] FAILED in Android - /specs/ballotMainTest.js
[2-0] 2020-07-05T23:34:07.024Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-25")
[2-0] 2020-07-05T23:34:07.024Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-25/displayed
[2-0] 2020-07-05T23:34:07.223Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:34:07.522Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-25")
[2-0] 2020-07-05T23:34:07.523Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-25/displayed
[2-0] 2020-07-05T23:34:07.719Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:34:08.023Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-25")
[2-0] 2020-07-05T23:34:08.023Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-25/displayed
[2-0] 2020-07-05T23:34:08.211Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:34:08.523Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-25")
[2-0] 2020-07-05T23:34:08.523Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-25/displayed
[2-0] 2020-07-05T23:34:08.712Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:34:09.023Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-25")
[2-0] 2020-07-05T23:34:09.023Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-25/displayed
[2-0] 2020-07-05T23:34:09.266Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:34:09.523Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-25")
[2-0] 2020-07-05T23:34:09.523Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-25/displayed
[2-0] 2020-07-05T23:34:09.718Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:34:10.022Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-25")
[2-0] 2020-07-05T23:34:10.022Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-25/displayed
[2-0] 2020-07-05T23:34:10.219Z INFO webdriver: RESULT false
[2-0] 2020-07-05T23:34:10.522Z INFO webdriver: COMMAND isElementDisplayed("0.21810297461574035-25")
[2-0] 2020-07-05T23:34:10.523Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/86feaffcb8d1161d5dd3857e135f2dafed15fd61/element/0.21810297461574035-25/displayed
[2-0] 2020-07-05T23:34:10.753Z INFO webdriver: RESULT false
[2-0] Error in "Cross browser automated testing should go back to the ballot tab"
waitUntil condition timed out after 5000ms
[2-0] FAILED in Android - /specs/ballotMainTest.js
[3-0] 2020-07-05T23:34:16.977Z INFO webdriver: COMMAND findElement("css selector", "#valuesTabHeaderBar")
[3-0] 2020-07-05T23:34:16.978Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
[3-0] 2020-07-05T23:34:16.978Z INFO webdriver: DATA { using: 'css selector', value: '#valuesTabHeaderBar' }
[3-0] 2020-07-05T23:34:17.213Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-22',
  ELEMENT: '0.04511222181228458-22'
}
[3-0] 2020-07-05T23:34:17.218Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-22")
[3-0] 2020-07-05T23:34:17.219Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-22/displayed
[3-0] 2020-07-05T23:34:17.560Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:17.718Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-22")
[3-0] 2020-07-05T23:34:17.719Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-22/displayed
[3-0] 2020-07-05T23:34:17.931Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:18.219Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-22")
2020-07-05T23:34:18.220Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-22/displayed
[3-0] 2020-07-05T23:34:18.425Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:18.718Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-22")
[3-0] 2020-07-05T23:34:18.718Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-22/displayed
[3-0] 2020-07-05T23:34:18.952Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:19.219Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-22")
[3-0] 2020-07-05T23:34:19.220Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-22/displayed
[3-0] 2020-07-05T23:34:19.426Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:19.719Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-22")
[3-0] 2020-07-05T23:34:19.720Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-22/displayed
[3-0] 2020-07-05T23:34:20.347Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:20.349Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-22")
[3-0] 2020-07-05T23:34:20.352Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-22/displayed
[3-0] 2020-07-05T23:34:20.560Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:20.719Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-22")
[3-0] 2020-07-05T23:34:20.719Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-22/displayed
[3-0] 2020-07-05T23:34:20.947Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:21.219Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-22")
[3-0] 2020-07-05T23:34:21.219Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-22/displayed
[3-0] 2020-07-05T23:34:21.452Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:21.719Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-22")
[3-0] 2020-07-05T23:34:21.720Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-22/displayed
[3-0] 2020-07-05T23:34:21.969Z INFO webdriver: RESULT false
[3-0] Error in "Cross browser automated testing should go to the values tab"
waitUntil condition timed out after 5000ms
[3-0] 2020-07-05T23:34:22.225Z INFO webdriver: COMMAND findElement("css selector", "#friendsTabHeaderBar")
[3-0] 2020-07-05T23:34:22.225Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
[3-0] 2020-07-05T23:34:22.225Z INFO webdriver: DATA { using: 'css selector', value: '#friendsTabHeaderBar' }
[3-0] 2020-07-05T23:34:22.476Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-23',
  ELEMENT: '0.04511222181228458-23'
}
[3-0] 2020-07-05T23:34:22.483Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-23")
[3-0] 2020-07-05T23:34:22.483Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-23/displayed
[3-0] 2020-07-05T23:34:22.719Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:22.983Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-23")
[3-0] 2020-07-05T23:34:22.983Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-23/displayed
[3-0] 2020-07-05T23:34:23.193Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:23.482Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-23")
[3-0] 2020-07-05T23:34:23.482Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-23/displayed
[3-0] 2020-07-05T23:34:23.704Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:23.985Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-23")
[3-0] 2020-07-05T23:34:23.985Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-23/displayed
[3-0] 2020-07-05T23:34:24.200Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:24.483Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-23")
[3-0] 2020-07-05T23:34:24.483Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-23/displayed
[3-0] 2020-07-05T23:34:24.728Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:24.983Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-23")
[3-0] 2020-07-05T23:34:24.983Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-23/displayed
[3-0] 2020-07-05T23:34:25.189Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:25.482Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-23")
[3-0] 2020-07-05T23:34:25.483Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-23/displayed
[3-0] 2020-07-05T23:34:25.713Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:25.982Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-23")
[3-0] 2020-07-05T23:34:25.983Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-23/displayed
[3-0] 2020-07-05T23:34:26.190Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:26.483Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-23")
[3-0] 2020-07-05T23:34:26.483Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-23/displayed
[3-0] 2020-07-05T23:34:26.689Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:26.983Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-23")
[3-0] 2020-07-05T23:34:26.984Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-23/displayed
[3-0] 2020-07-05T23:34:27.230Z INFO webdriver: RESULT false
[3-0] Error in "Cross browser automated testing should go to the friends tab"
waitUntil condition timed out after 5000ms
[3-0] 2020-07-05T23:34:27.485Z INFO webdriver: COMMAND findElement("css selector", "#readyTabHeaderBar")
[3-0] 2020-07-05T23:34:27.485Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
[3-0] 2020-07-05T23:34:27.485Z INFO webdriver: DATA { using: 'css selector', value: '#readyTabHeaderBar' }
[3-0] 2020-07-05T23:34:27.746Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-24',
  ELEMENT: '0.04511222181228458-24'
}
[3-0] 2020-07-05T23:34:27.754Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-24")
[3-0] 2020-07-05T23:34:27.754Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-24/displayed
[3-0] 2020-07-05T23:34:28.012Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:28.255Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-24")
[3-0] 2020-07-05T23:34:28.255Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-24/displayed
[3-0] 2020-07-05T23:34:28.469Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:28.755Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-24")
[3-0] 2020-07-05T23:34:28.755Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-24/displayed
[3-0] 2020-07-05T23:34:28.957Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:29.255Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-24")
[3-0] 2020-07-05T23:34:29.255Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-24/displayed
[3-0] 2020-07-05T23:34:29.470Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:29.755Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-24")
[3-0] 2020-07-05T23:34:29.755Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-24/displayed
[3-0] 2020-07-05T23:34:30.053Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:30.257Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-24")
[3-0] 2020-07-05T23:34:30.257Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-24/displayed
[3-0] 2020-07-05T23:34:30.472Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:30.754Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-24")
[3-0] 2020-07-05T23:34:30.754Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-24/displayed
[3-0] 2020-07-05T23:34:30.975Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:31.255Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-24")
[3-0] 2020-07-05T23:34:31.256Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-24/displayed
[3-0] 2020-07-05T23:34:31.487Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:31.755Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-24")
[3-0] 2020-07-05T23:34:31.756Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-24/displayed
[3-0] 2020-07-05T23:34:32.007Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:32.255Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-24")
[3-0] 2020-07-05T23:34:32.255Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-24/displayed
[3-0] 2020-07-05T23:34:32.474Z INFO webdriver: RESULT false
[3-0] Error in "Cross browser automated testing should go to the ready tab"
waitUntil condition timed out after 5000ms
[3-0] 2020-07-05T23:34:32.756Z INFO webdriver: COMMAND findElement("css selector", "#ballotTabHeaderBar")
[3-0] 2020-07-05T23:34:32.756Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element
[3-0] 2020-07-05T23:34:32.756Z INFO webdriver: DATA { using: 'css selector', value: '#ballotTabHeaderBar' }
[3-0] 2020-07-05T23:34:32.976Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '0.04511222181228458-25',
  ELEMENT: '0.04511222181228458-25'
}
[3-0] 2020-07-05T23:34:32.983Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-25")
[3-0] 2020-07-05T23:34:32.984Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-25/displayed
[3-0] 2020-07-05T23:34:33.206Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:33.484Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-25")
[3-0] 2020-07-05T23:34:33.485Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-25/displayed
[3-0] 2020-07-05T23:34:33.733Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:33.984Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-25")
[3-0] 2020-07-05T23:34:33.984Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-25/displayed
[3-0] 2020-07-05T23:34:34.209Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:34.484Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-25")
[3-0] 2020-07-05T23:34:34.484Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-25/displayed
[3-0] 2020-07-05T23:34:34.710Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:34.984Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-25")
[3-0] 2020-07-05T23:34:34.984Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-25/displayed
[3-0] 2020-07-05T23:34:35.184Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:35.484Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-25")
[3-0] 2020-07-05T23:34:35.484Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-25/displayed
[3-0] 2020-07-05T23:34:35.700Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:35.984Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-25")
[3-0] 2020-07-05T23:34:35.984Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-25/displayed
[3-0] 2020-07-05T23:34:36.190Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:36.484Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-25")
[3-0] 2020-07-05T23:34:36.484Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-25/displayed
[3-0] 2020-07-05T23:34:36.710Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:36.984Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-25")
[3-0] 2020-07-05T23:34:36.984Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-25/displayed
[3-0] 2020-07-05T23:34:37.206Z INFO webdriver: RESULT false
[3-0] 2020-07-05T23:34:37.484Z INFO webdriver: COMMAND isElementDisplayed("0.04511222181228458-25")
[3-0] 2020-07-05T23:34:37.485Z INFO webdriver: [GET] https://hub-cloud.browserstack.com:443/wd/hub/session/6a96765ff4c074b5e0c712ff85856fec8b696ffe/element/0.04511222181228458-25/displayed
[3-0] 2020-07-05T23:34:37.734Z INFO webdriver: RESULT false
[3-0] Error in "Cross browser automated testing should go back to the ballot tab"
waitUntil condition timed out after 5000ms
[3-0] FAILED in Android - /specs/ballotMainTest.js

Spec Files:	 0 passed, 4 failed, 4 total (100% completed) in 00:03:46 

