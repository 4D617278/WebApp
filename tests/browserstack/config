#!/bin/bash
usage () { echo -e "Usage: $0 -f <path to configuration file> -o <os_version> [-w <write to file>] [-d <device name>] [-p <project>] [-b <browser>] [-c <console>] [--os <os>] [--debug] [--ssl] [--localtest] [--ios] [--android] [--cordova] [--mobile-screen] [--real-mobile]\n\nExample: $0 -f /opt/MyProjects/WebApp/tests/browserstack/test.wdio.conf.js -o 10.0 --os Windows"; exit; }
error () { echo $1; exit; }

[[ $# -lt 4 ]] && usage

# Option Strings
SHORT=f:o:d:p:b:c:hw
LONG=os:,debug,ssl,localtest,ios,android,cordova,mobile-screen,real-mobile

# Read the options
OPTS=$(getopt --options $SHORT --long $LONG --name "$0" -- "$@")
[ $? -ne 0 ] && error 'Failed to parse options.' >&2 
eval set -- "$OPTS"

# Set initial values
var_device=''
var_project=''
var_browser=''
var_console='errors'
var_os=''
var_real_mobile=false
var_isAndroid=false
var_isCordova=false
var_isIOS=false
var_isMobileScreenSize=false
var_debug=false
var_ssl=false
var_localTest=false

# Extract options 
while true; do 
    case "$1" in 
        -f)
            filepath="$2"
            shift 2;;
        -o)
            var_OS_VERSION="$2" 
            shift 2;;
        -d)
            var_device="$2"
            shift 2;;
        -p)
            var_project="$2"
            shift 2;;
        -b)
            var_browser="$2"
            shift 2;;
        -c)
            var_console="$2"
            shift 2;;
        -w)
            write=1
            shift 1;;
        --os)
            var_os="$2"
            shift 2;;
        --debug)
            var_debug=true
            shift;;
        --ssl)
            var_ssl=true
            shift;;
        --localtest)
            var_localTest=true
            shift;;
        --ios)
            var_isIOS=true
            shift;;
        --android)
            var_isAndroid=true
            shift;;
        --cordova)
            var_isCordova=true
            shift;;
        --mobile-screen)
            var_isMobileScreenSize=true
            shift;;
        --real-mobile)
            var_real_mobile=true
            shift;;
        -h)
            usage;;
        --)
            shift
            break;;
        *)
            usage;;
    esac
done

[[ -z "$var_OS_VERSION" ]] && error 'Needs os version. Use -h for help'
[[ -z "$filepath" ]] && error 'Needs path to configuration file. Use -h for help'

var_name=`echo $device | tr -d ' '`;
for variable in ${!var_@}; 
do 
    [[ ! -z "$variable" ]] && var=`echo $variable | cut -c 5-` && replaceString+="s/%$var/${!variable}/g;"
done;

[[ $write -eq 1 ]] && sed -i "$replaceString" $filepath || sed "$replaceString" $filepath;
